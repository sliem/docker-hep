C ======================================================================

      SUBROUTINE CHECKINPUT_GG
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I,J)
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/CONST2/SCALE,SCAFAC,ICOLL,ISCAPT
      COMMON/CONST5/ILO,INLO,IONLYLO
      COMMON/CUT1/PTMIN,PTMAX
      COMMON/CUT2/YMIN,YMAX
      COMMON/FLAVOR/IFLAVOR,ITOTAL


C***  CHECK MS,MG AND MT ( SHOULD BE ABOVE 1 GEV )
      IF (MS.LT.1D0) THEN
         MS = 1D0
         PRINT *,'MS CHANGED TO 1.'
      END IF
      IF (MG.LT.1D0) THEN
         MG = 1D0
         PRINT *,'MG CHANGED TO 1.'
      END IF
      IF (MT.LT.1D0) THEN
         MT = 1D0
         PRINT *,'MT CHANGED TO 1.'
      END IF

C***  CHECK ICOLL
      IF ((ICOLL.LT.0).OR.(ICOLL.GT.1)) THEN
         PRINT *,'COLLIDER TYPE SPECIFIED INCORRECTLY; ICOLL = ',ICOLL
         PRINT *,'PROGRAM ABORTED'
         call HARD_STOP
      END IF

C***  CHECK ENERGY ( SHOULD BE ABOVE PRODUCTION THRESHOLD )
      IF (ENERGY.LT.2*MG) THEN
         PRINT *,'ENERGY TOO SMALL TO PRODUCE GLUINO-GLUINO'
         PRINT *,'PROGRAM ABORTED'
         call HARD_STOP
      END IF

C***  CHECK IFLAVOR
      IF ((IFLAVOR.LT.0).OR.(IFLAVOR.GT.5)) THEN
         PRINT *,'IFLAVOR IN THE WRONG RANGE; IFLAVOR = ',IFLAVOR
         PRINT *,'IFLAVOR CHANGED TO 0 (ALL)'
         IFLAVOR = 0
      END IF

C***  CHECK ITOTAL
      IF ((ITOTAL.LT.0).OR.(ITOTAL.GT.1)) THEN
         PRINT *,'ITOTAL IN THE WRONG RANGE; ITOTAL = ',ITOTAL
         PRINT *,'ITOTAL CHANGED TO 1'
         ITOTAL = 1
      END IF

C***  CHECK ISCAPT AND SCAFAC
      IF ((ISCAPT.LT.0).OR.(ISCAPT.GT.1)) THEN
         PRINT *,'ISCAPT IN THE WRONG RANGE; ISCAPT = ',ISCAPT
         PRINT *,'ISCAPT CHANGED TO 0'
         ISCAPT = 0
      END IF
      IF (SCAFAC.LT.1D-2) THEN
         PRINT *, 'SCAFAC TOO SMALL'
         PRINT *, 'SCAFAC CHANGED TO 1.'
         SCAFAC = 1.D0
      END IF
      IF ((ITOTAL.EQ.1).AND.(ISCAPT.EQ.1)) THEN
         PRINT *,'WARNING: TRANSVERSE MASS IS NOT USED AS A SCALE'
      END IF

C***  CHECK PTMIN AND PTMAX
      IF (PTMIN.LT.0D0) THEN
         PTMIN = 0D0
         PRINT *,'PTMIN NEGATIVE'
         PRINT *,'PTMIN CHANGED TO 0.'
      END IF
      IF (PTMAX.LT.0D0) THEN
         PTMAX = 0D0
         PRINT *,'PTMAX NEGATIVE'
         PRINT *,'PTMAX CHANGED TO 0.'
      END IF
      IF (PTMAX.LT.PTMIN) THEN
         PTMAX = PTMIN
         PRINT *,'PTMAX SMALLER THAN PTMIN'
         PRINT *,'PTMAX CHANGED TO PTMIN'
      END IF
      IF ((PTMAX.EQ.PTMIN).AND.(PTMAX.EQ.0D0)) THEN
         PTMAX = 0.1D0
         PTMIN = 0.1D0
         PRINT *,'PTMAX = PTMIN CHANGED TO 0.1'
      END IF

C***  CHECK YMIN AND YMAX
      IF (YMIN.LT.0D0) THEN
         YMIN = 0D0
         PRINT *,'YMIN NEGATIVE'
         PRINT *,'YMIN CHANGED TO 0.'
      END IF
      IF (YMAX.LT.0D0) THEN
         YMAX = 0D0
         PRINT *,'YMAX NEGATIVE'
         PRINT *,'YMAX CHANGED TO 0.'
      END IF
      IF (YMAX.LT.YMIN) THEN
         YMAX = YMIN
         PRINT *,'YMAX SMALLER THAN YMIN'
         PRINT *,'YMAX CHANGED TO YMIN'
      END IF

C***  CHECK IONLYLO
      IF ((IONLYLO.LT.0).OR.(IONLYLO.GT.1)) THEN
         PRINT *,'IONLYLO IN THE WRONG RANGE'
         PRINT *,'IONLYLO CHANGED TO 0'
         IONLYLO = 0
      END IF

C***  CHECK ILO, INLO
      IF (ILO.LT.10) THEN
         ILO = 10
         PRINT *,'ILO CHANGED TO 10'
      END IF
      IF (INLO.LT.10) THEN
         INLO = 10
         PRINT *,'INLO CHANGED TO 10'
      END IF

      RETURN
      END


C ======================================================================

      SUBROUTINE INTEGGG(RESLO,ERRLO,RESNLO,ERRNLO)
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I,J)
      integer  ivegas(1:4)
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/CONST5/ILO,INLO,IONLYLO

      EXTERNAL SIGLOGG, SIGNLOGG

      CALL CHECKINPUT_GG

      S = ENERGY**2

      CALL INILO(ivegas)
      idim = 3
      acc = 1.d-4
      call INTEG(SIGLOGG,idim,ivegas,acc,reslo,errlo)

      IF (IONLYLO.EQ.0) THEN
         CALL ININLO(ivegas)
         idim = 5 
         call INTEG(SIGNLOGG,idim,ivegas,acc,resnlo,errnlo)
      ELSE 
         RESNLO = 0D0
         ERRNLO = 0D0
      END IF

      RETURN
      END

C ======================================================================
C***  THE CROSS-SECTION IN LO

      REAL*8 FUNCTION SIGLOGG(VAR)
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I,J)
      DIMENSION VAR(3)
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/CONST2/SCALE,SCAFAC,ICOLL,ISCAPT
      COMMON/PTYGG/PT,PREPT,MTRANS,YVAL,PREY
      COMMON/FLAVOR/IFLAVOR,ITOTAL

      CALL DVEGLO_GG(VAR)
      IF (ITOTAL.EQ.0) THEN
         CALL DPTYGG
         CALL DEFSCAGG
         CALL DDILOGG
         SIGLOGG1 = EGGGGLO()
         SIGLOGG2 = EGGQBLO()

C***     SUM OVER POSITIVE AND NEGATIVE RAPIDITY
         SIGLOGG1 = 2 * SIGLOGG1
         SIGLOGG2 = 2 * SIGLOGG2
      ELSE
         CALL DEFSCAGG
         CALL DTOLOGG
         SIGLOGG1 = FGGGGLO()
         SIGLOGG2 = FGGQBLO()
      END IF
      SIGLOGG =  SUMLOGG(SIGLOGG1,SIGLOGG2,IFLAVOR)

      RETURN
      END

C ======================================================================
C***  THE CROSS-SECTION IN NLO

      REAL*8 FUNCTION SIGNLOGG(VAR)
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I,J)
      DIMENSION VAR(5)
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/CONST2/SCALE,SCAFAC,ICOLL,ISCAPT
      COMMON/PTYGG/PT,PREPT,MTRANS,YVAL,PREY
      COMMON/FLAVOR/IFLAVOR,ITOTAL

      CALL DVEGNLO_GG(VAR)
      CALL DMINLGG

      IF (ITOTAL.EQ.0) THEN
         CALL DPTYGG
         CALL DEFSCAGG
         CALL DDINLGG
         CALL DD4NLGG
         CALL DD3NLGG
         IF ((IFLAVOR.EQ.0).OR.(IFLAVOR.EQ.1).OR.(IFLAVOR.EQ.4))      
     +        SIGNLOGG1 = EGGGGNLO()
         IF ((IFLAVOR.EQ.0).OR.(IFLAVOR.EQ.2).OR.(IFLAVOR.EQ.4)) 
     +        SIGNLOGG2 = EGGQBNLO()
         IF ((IFLAVOR.EQ.0).OR.(IFLAVOR.EQ.3).OR.(IFLAVOR.EQ.5))
     +        SIGNLOGG3 = EGGGBNLO()

C***     SUM OVER POSITIVE AND NEGATIVE RAPIDITY
         SIGNLOGG1 = 2 * SIGNLOGG1
         SIGNLOGG2 = 2 * SIGNLOGG2
         SIGNLOGG3 = 2 * SIGNLOGG3
      ELSE
         CALL DEFSCAGG
         CALL DTONLGG
         CALL DTSNLGG
         IF ((IFLAVOR.EQ.0).OR.(IFLAVOR.EQ.1).OR.(IFLAVOR.EQ.4)) 
     +        SIGNLOGG1 = FGGGGNLO()
         IF ((IFLAVOR.EQ.0).OR.(IFLAVOR.EQ.2).OR.(IFLAVOR.EQ.4)) 
     +        SIGNLOGG2 = FGGQBNLO()
         IF ((IFLAVOR.EQ.0).OR.(IFLAVOR.EQ.3).OR.(IFLAVOR.EQ.5)) 
     +        SIGNLOGG3 = FGGGBNLO()
      END IF
      SIGNLOGG =  SUMNLOGG(SIGNLOGG1,SIGNLOGG2,SIGNLOGG3,IFLAVOR)


      RETURN
      END

C ======================================================================

      SUBROUTINE DVEGLO_GG(VAR)
C***  FILLS UP THE COMMON BLOCK VARVEGAS WITH 3 VARIABLES
      IMPLICIT REAL*8 (A-H,M-Z)
      DIMENSION VAR(3)
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      Y1 = VAR(1)
      Y2 = VAR(2)
      Y3 = VAR(3)
      RETURN
      END

C ======================================================================

      SUBROUTINE DVEGNLO_GG(VAR)
C***  FILLS UP THE COMMON BLOCK VARVEGAS WITH 5 VARIABLES
      IMPLICIT REAL*8 (A-H,M-Z)
      DIMENSION VAR(5)
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      Y1 = VAR(1)
      Y2 = VAR(2)
      Y3 = VAR(3)
      Y4 = VAR(4)
      Y5 = VAR(5)
      RETURN
      END

C ======================================================================

      SUBROUTINE DEFSCAGG()
C***  DEFINES THE RENORMALIZATION AND FACTORIZATION SCALE
C***  FILLS UP PART OF THE COMMON BLOCKS CONST1 AND CONST2
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/CONST2/SCALE,SCAFAC,ICOLL,ISCAPT
      COMMON/PTYGG/PT,PREPT,MTRANS,YVAL,PREY
      COMMON/FLAVOR/IFLAVOR,ITOTAL

      IF ((ITOTAL.EQ.0).AND.(ISCAPT.EQ.1)) THEN
         SCALE = MTRANS * SCAFAC
      ELSE 
         SCALE = MG * SCAFAC
      END IF

C***  THE SCALE SHOULD BE BELOW 1 TEV, BECAUSE SOME PARTON DENSITIES
C***  ARE RESTRICTED TO THIS REGION

      IF (SCALE.GE.1000D0) SCALE = 1000D0

      IF (SCALE.LE.5D0) SCALE = 5D0

      ALPHAS = ALPS(SCALE)

      RETURN
      END

C ======================================================================

      SUBROUTINE DPTYGG()
C***  DEFINES PT AND Y (INCLUDING CUTS) 
C***  FILLS UP THE COMMON BLOCK PTYGG
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/CUT1/PTMINC,PTMAXC
      COMMON/CUT2/YMINC,YMAXC
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      COMMON/PTYGG/PT,PREPT,MTRANS,YVAL,PREY
      PT2MAX = S/4.D0 -MG**2
      PTMAX = SQRT( DMIN1(PT2MAX,PTMAXC**2) )
      PTMIN = PTMINC
      IF (PTMAX.GT.PTMIN) THEN
         PT = (PTMAX-PTMIN) * Y1 +PTMIN
         PREPT = 2.D0 * PT * (PTMAX -PTMIN)
      ELSE IF (PTMAX.EQ.PTMIN) THEN
         PT = PTMIN
         PREPT = 2.D0 * PT
      ELSE IF (PTMAX.LT.PTMIN) THEN 
         PT = 0D0
         PREPT = 0D0
      END IF
      MTRANS = SQRT(PT**2 +MG**2)
      YMAXK = +DACOSH(SQRT(S)/2.D0/MTRANS)
      YMINK = -DACOSH(SQRT(S)/2.D0/MTRANS)
      YMAX = DMIN1( YMAXK, YMAXC)
      YMIN = DMAX1( YMINK, YMINC, 0D0)
      IF (YMAX.GT.YMIN) THEN
         YVAL = (YMAX -YMIN) * Y2 + YMIN
         PREY = YMAX - YMIN
      ELSE IF (YMAX.EQ.YMIN) THEN         
         YVAL = YMIN
         PREY = 1.D0
      ELSE IF (YMAX.LT.YMIN) THEN
         YVAL = 0D0
         PREY = 0D0
      END IF
      RETURN
      END

C ======================================================================

      SUBROUTINE DDILOGG()
C***  DEFINES THE KINEMATICS FOR DIFFERENTIAL CROSS-SECTIONS IN LO
C***  FILLS UP THE COMMON BLOCK DILOGG AND PDLOGG
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/PTYGG/PT,PREPT,MTRANS,YVAL,PREY
      COMMON/DILOGG/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      COMMON/PDLOGG/PDGGB,PDQBB,PDBQB
      TG = -SQRT(S)*MTRANS*DEXP(+YVAL)
      UG = -SQRT(S)*MTRANS*DEXP(-YVAL)
      X1MIN = -TG/(S+UG)
      X1 = X1MIN ** Y3
      X2B= -X1*UG/(X1*S +TG)
      SHATB  = X1 *X2B*S
      TGHATB = X2B*TG
      UGHATB = X1 *UG
      PREFB = S * PREPT * PREY *LOG(X1MIN)*(-X1*X2B)/(-X1*UG)
      CALL PDFLOGG(X1,X2B)
      RETURN
      END

C ======================================================================

      SUBROUTINE DTOLOGG()
C***  DEFINES THE KINEMATICS FOR TOTAL CROSS-SECTIONS IN LO
C***  FILLS UP THE COMMON BLOCK TOLOGG AND PDLOGG
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/TOLOGG/SHAT,TGHAT,PREF,X1,X2
      COMMON/PDLOGG/PDGGB,PDQBB,PDBQB
      X1 = (4*MG**2/S) ** Y1
      X2 = (4*MG**2/S/X1) ** Y2
      SHAT = X1*X2*S
      BETA = SQRT(1D0 -4*MG**2/SHAT)
      TGHAT = -SHAT/2D0 +(Y3 -0.5D0)*SHAT*BETA
      PREF = SHAT*BETA *LOG(4*MG**2/S)*LOG(4*MG**2/S/X1)
      CALL PDFLOGG(X1,X2)
      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION EGGGGLO()
C***  CALCULATES THE DIFFERENTIAL CROSS-SECTION IN LO FOR G G
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/PDLOGG/PDGGB,PDQBB,PDBQB
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/DILOGG/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      EGGGGLO = 
     +     PDGGB *PREFB * DGGGGB(ALPHAS,SHATB,TGHATB,MS,MG) 
      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION EGGQBLO()
C***  CALCULATES THE DIFFERENTIAL CROSS-SECTION IN LO FOR Q QB
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/PDLOGG/PDGGB,PDQBB,PDBQB
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/DILOGG/SHATB,TGHATB,UGHATB,PREFB,X1,X2B

      PDQBB = PDQBB + PDBQB

      EGGQBLO = 
     +     +  PDQBB * PREFB*DGGQBB(ALPHAS,SHATB,TGHATB,MS,MG) 

      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION FGGGGLO()
C***  CALCULATES THE TOTAL CROSS-SECTION IN LO FOR G G
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/PDLOGG/PDGGB,PDQBB,PDBQB
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/TOLOGG/SHAT,TGHAT,PREF,X1,X2
      FGGGGLO = 
     +     PDGGB * PREF*DGGGGB(ALPHAS,SHAT,TGHAT,MS,MG) 
      RETURN
      END

C ====================================================================== 
      REAL*8 FUNCTION FGGQBLO()
C***  CALCULATES THE TOTAL CROSS-SECTION IN LO FOR Q QB
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/PDLOGG/PDGGB,PDQBB,PDBQB
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/TOLOGG/SHAT,TGHAT,PREF,X1,X2
      FGGQBLO = 
     +     +  (PDQBB +PDBQB ) * PREF*DGGQBB(ALPHAS,SHAT,TGHAT,MS,MG) 

      RETURN
      END

C ======================================================================
 
      REAL*8 FUNCTION SUMLOGG(SIGLOGG1,SIGLOGG2,IFLAVOR)
C***  SUMS UP DIFFERENT FLAVOR STATES FOR CROSS-SECTION IN LO
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I)
      IF ((IFLAVOR.EQ.0).OR.(IFLAVOR.EQ.4))
     +                  SUMLOGG = SIGLOGG1 + SIGLOGG2
      IF (IFLAVOR.EQ.1) SUMLOGG = SIGLOGG1
      IF (IFLAVOR.EQ.2) SUMLOGG = SIGLOGG2
      IF ((IFLAVOR.EQ.3).OR.(IFLAVOR.EQ.5)) SUMLOGG = 0D0
      RETURN
      END

C ======================================================================

      SUBROUTINE DMINLGG()
C***  DEFINES SOME MISCELLANEOUS VARIABLES FOR CROSS-SECTION IN NLO
C***  FILLS UP THE COMMON BLOCK MINLGG
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/CONST2/SCALE,SCAFAC,ICOLL,ISCAPT
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
C***  EPS = ( GAMMA(SQUARK)/MASS(SQUARK) )**2
      EPS = 1.D-5
      DEL = 1.D-4 * MG**2 
      SCA = SCALE**2/MG**2
      M2 = MG**2 -MS**2
      GAM = SQRT(EPS)*MS**2
      RETURN
      END

C ======================================================================

      SUBROUTINE DDINLGG()
C***  DEFINES THE KINEMATICS FOR DIFFERENTIAL CROSS-SECTIONS IN NLO
C***  FILLS UP THE COMMON BLOCK DINLGG1-2 AND PDLOGG, PDNLGG1
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/PTYGG/PT,PREPT,MTRANS,YVAL,PREY
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/DINLGG1/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      COMMON/DINLGG2/SHAT,TGHAT,UGHAT,S4G,PREF,X2,S4GMAX
      COMMON/PDLOGG/PDGGB,PDQBB,PDBQB
      COMMON/PDNLGG1/ PDGG ,PDQB ,PDBQ

      TG = -SQRT(S)*MTRANS*DEXP(+YVAL)
      UG = -SQRT(S)*MTRANS*DEXP(-YVAL)
      X1MIN = -TG/(S+UG)
      X1 = X1MIN ** Y3
      S4GMAX = X1 * (S+UG) +TG
      S4G = (S4GMAX -DEL)* Y4 +DEL
      X2 = (S4G -X1*UG)/(X1*S +TG)
      X2B= -X1*UG/(X1*S +TG)
      SHAT   = X1 *X2 *S
      SHATB  = X1 *X2B*S
      TGHAT  = X2 *TG
      TGHATB = X2B*TG
      UGHAT  = X1 *UG
      UGHATB = X1 *UG
      PREF  = S * PREPT * PREY *LOG(X1MIN)*(-X1*X2 )
     +     *(S4GMAX -DEL)/(S4G-X1*UG)
      PREFB = S * PREPT * PREY *LOG(X1MIN)*(-X1*X2B)/(-X1*UG)
      CALL PDFNLOGG1(X1,X2,X2B)
      RETURN
      END

C ======================================================================

      SUBROUTINE DD4NLGG()
C***  DEFINES THE KINEMATICS FOR DIFFERENTIAL CROSS-SECTIONS IN NLO
C***  INCLUDING SUBTRACTION IN S4
C***  FILLS UP THE COMMON BLOCKS DINLGG3-4 
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/PTYGG/PT,PREPT,MTRANS,YVAL,PREY
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/DINLGG3/SHAT0,TGHAT0,UGHAT0,S4G0,X10,X20,PREF0,S402
      COMMON/DINLGG4/SHAT1,TGHAT1,UGHAT1,S4G1,X11,X21,PREF1,S4GUP

      TG = -SQRT(S)*MTRANS*DEXP(+YVAL)
      UG = -SQRT(S)*MTRANS*DEXP(-YVAL)
      S4GMAX0 = S + TG +UG
      TYMIN = ATAN(+M2/GAM)
      TYMAX = ATAN((S4GMAX0+M2)/GAM)
      TY = (TYMAX -TYMIN) * Y3 + TYMIN 
      PREFTY = (TYMAX -TYMIN)/GAM 
      S4G0 = GAM*TAN(TY) - M2
      S4G1 = - M2

      X1MIN0 = (S4G0 -TG)/(S +UG)
      X1MIN1 = (S4G1 -TG)/(S +UG)
      X10 = X1MIN0**Y4
      X11 = X1MIN1**Y4
      X20 = (S4G0 -X10*UG)/(X10*S +TG)
      X21 = (S4G1 -X11*UG)/(X11*S +TG)
      SHAT0  = X10 * X20 * S
      SHAT1  = X11 * X21 * S
      TGHAT0 = X20 * TG
      TGHAT1 = X21 * TG
      UGHAT0 = X10 * UG
      UGHAT1 = X11 * UG
      S402  = (S4G0 -MS**2 +MG**2)**2 + EPS * MS**4
      S4GUP   = SHAT1 - 2D0*SQRT(SHAT1*MG**2)
      PREF0  = S * PREPT * PREY * LOG(X1MIN0)*(-X10*X20)/(S4G0-X10*UG)
     +     *PREFTY
      PREF1  = S * PREPT * PREY * LOG(X1MIN1)*(-X11*X21)/(S4G1-X11*UG)
     +     *PREFTY
      RETURN
      END

C ======================================================================

      SUBROUTINE DD3NLGG()
C***  DEFINES THE KINEMATICS FOR DIFFERENTIAL CROSS-SECTIONS IN NLO
C***  INCLUDING SUBTRACTION IN S3
C***  FILLS UP THE COMMON BLOCKS DINLGG5-7
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/PTYGG/PT,PREPT,MTRANS,YVAL,PREY
      COMMON/DINLGG5/SHAT2,TGHAT2,UGHAT2,S4G2,X12,X22,PREF2,S3G2,S32
      COMMON/DINLGG6/SHAT3,TGHAT3,UGHAT3,S4G3,X13,X23,PREF3,S33,S3GUP
      COMMON/DINLGG7/SHAT4,TGHAT4,UGHAT4,S4GMAX4,PREF4,X14,X24

      TG = -SQRT(S)*MTRANS*DEXP(+YVAL)
      UG = -SQRT(S)*MTRANS*DEXP(-YVAL)
      S3GMAX2 = (S+TG+UG)/2D0/(S+TG+UG+MG**2) * 
     +     (-TG -UG -2*MG**2 +SQRT((TG+UG)**2 -4*MG**2 *S))

      TZMIN = ATAN(+M2/GAM)
      TZMAX = ATAN((S3GMAX2+M2)/GAM)
      TZ = (TZMAX -TZMIN) * Y3 + TZMIN 
      PREFTZ = (TZMAX -TZMIN)/GAM 
      S3G2 = GAM*TAN(TZ) - M2
      S3G3 = - M2

      X1MIN2 = -(2*MG**2*S*S3G2 +S*S3G2**2 +2*MG**2*S*TG +S*S3G2*TG 
     +     +2*MG**2*S3G2*UG +S3G2**2*UG +2*MG**2*TG*UG +2*S3G2*TG*UG
     +     +S3G2*SQRT(4*MG**2*S**2*S3G2 +S**2*S3G2**2 +4*MG**2*S**2*TG 
     +   +2*S**2*S3G2*TG +S**2*TG**2 +4*MG**2*S*S3G2*UG +2*S*S3G2**2*UG 
     +     +4*MG**2*S*TG*UG +2*S*S3G2*TG*UG +S3G2**2*UG**2))/
     +     2D0/(S+UG)/(MG**2*S+MG**2*UG +S3G2*UG)

      X1MIN3 = -(2*MG**2*S*S3G3 +S*S3G3**2 +2*MG**2*S*TG +S*S3G3*TG 
     +     +2*MG**2*S3G3*UG +S3G3**2*UG +2*MG**2*TG*UG +2*S3G3*TG*UG
     +     +S3G3*SQRT(4*MG**2*S**2*S3G3 +S**2*S3G3**2 +4*MG**2*S**2*TG 
     +   +2*S**2*S3G3*TG +S**2*TG**2 +4*MG**2*S*S3G3*UG +2*S*S3G3**2*UG 
     +     +4*MG**2*S*TG*UG +2*S*S3G3*TG*UG +S3G3**2*UG**2))/
     +     2D0/(S+UG)/(MG**2*S+MG**2*UG +S3G3*UG)

      X12 = X1MIN2**Y4
      X13 = X1MIN3**Y4

      SQRS4G2 = SQRT(
     +(-2*MG**2*TG -S3G2*TG -2*MG**2*X12*S -X12*S*S3G2 -X12**2*S*UG)**2 
     +  -4*MG**2*(TG+S*X12)*(MG**2*TG +S3G2*TG +MG**2*X12*S) )
      SQRS4G3 = SQRT(
     +(-2*MG**2*TG -S3G3*TG -2*MG**2*X13*S -X13*S*S3G3 -X13**2*S*UG)**2 
     +-4*MG**2*(TG+S*X13)*(MG**2*TG +S3G3*TG +MG**2*X13*S) )

      S4G2MIN = S3G2/2D0/(MG**2*(TG+X12*S) +S3G2*TG) * 
     +    (-2*MG**2*TG -S3G2*TG -2*MG**2*X12*S -X12*S*S3G2 -X12**2*S*UG 
     +    -SQRS4G2 )

      S4G3MIN = S3G3/2D0/(MG**2*(TG+X13*S) +S3G3*TG) * 
     +    (-2*MG**2*TG -S3G3*TG -2*MG**2*X13*S -X13*S*S3G3 -X13**2*S*UG 
     +    -SQRS4G3 )

      S3G2DEC = (TG +S*X12 +UG*X12)/2D0/(TG +S*X12 +UG*X12 +MG**2) * (
     +     -2*MG**2 -TG -X12*UG -SQRT((TG+UG*X12)**2 -4*MG**2*S*X12))
      S3G3DEC = (TG +S*X13 +UG*X13)/2D0/(TG +S*X13 +UG*X13 +MG**2) * (
     +     -2*MG**2 -TG -X13*UG -SQRT((TG+UG*X13)**2 -4*MG**2*S*X13))
      
      IF (S3G2.GE.S3G2DEC) THEN
         S4G2MAX = X12*(S+UG) +TG
      ELSE 
         S4G2MAX = S3G2/2D0/(MG**2*(TG+X12*S) +S3G2*TG) * 
     +    (-2*MG**2*TG -S3G2*TG -2*MG**2*X12*S -X12*S*S3G2 -X12**2*S*UG 
     +    +SQRS4G2 )
      END IF

      IF (S3G3.GE.S3G3DEC) THEN
         S4G3MAX = X13*(S+UG) +TG
      ELSE 
         S4G3MAX = S3G3/2D0/(MG**2*(TG+X13*S) +S3G3*TG) * 
     +    (-2*MG**2*TG -S3G3*TG -2*MG**2*X13*S -X13*S*S3G3 -X13**2*S*UG 
     +    +SQRS4G3 )
      END IF

      PREFS4G2 = S4G2MAX -S4G2MIN
      PREFS4G3 = S4G3MAX -S4G3MIN
      S4G2 = PREFS4G2 * Y5 +S4G2MIN
      S4G3 = PREFS4G3 * Y5 +S4G3MIN

      S32 = S3G2 + M2
      S33 = 0D0
      S322 = S32**2 + EPS*MS**4

      X22 = (S4G2 -X12*UG)/(X12*S +TG)
      X23 = (S4G3 -X13*UG)/(X13*S +TG)
      SHAT2 = X12 * X22 * S
      SHAT3 = X13 * X23 * S
      TGHAT2 = X22 * TG
      TGHAT3 = X23 * TG
      UGHAT2 = X12 * UG
      UGHAT3 = X13 * UG
      PREX2 = S4G2/2D0/(S4G2+MG**2)*SQRT((SHAT2-S4G2)**2-4*MG**2*SHAT2)
      PREX3 = S4G3/2D0/(S4G3+MG**2)*SQRT((SHAT3-S4G3)**2-4*MG**2*SHAT3)
      S3GUP   = SHAT3 - 2D0*SQRT(SHAT3*MG**2)

      PREF2  = S * PREPT * PREY * PREFTZ/PREX2 * LOG(X1MIN2)*(-X12*X22)
     +    * PREFS4G2/(S4G2-X12*UG)
      PREF3  = S * PREPT * PREY * PREFTZ/PREX3 * LOG(X1MIN3)*(-X13*X23)
     +    * PREFS4G3/(S4G3-X13*UG)


      X1MIN = -TG/(S+UG)
      X1 = X1MIN ** Y3
      X1MIN4 = X1MIN
      X14 = X1
      X24 = (-M2 -X14*UG)/(X14*S +TG)
      SHAT4  = X14 * X24 * S
      TGHAT4 = X24 * TG
      UGHAT4 = X14 * UG
      S4GMAX4 = X14*(S+UG)+TG
      PREF4 = S * PREPT * PREY *LOG(X1MIN4)*(-X14*X24)/(-M2 -X14*UG)


      RETURN
      END

C ======================================================================
      
      SUBROUTINE DTONLGG()
C***  DEFINES THE KINEMATICS FOR TOTAL CROSS-SECTIONS IN NLO
C***  FILLS UP THE COMMON BLOCKS DINLGG1-2 AND PDNLGGT
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      COMMON/DINLGG1/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      COMMON/DINLGG2/SHAT,TGHAT,UGHAT,S4G,PREF,X2,S4GMAX
      COMMON/PDNLGGT/PDGGT, PDQBT, PDGBT
      X1 = (4*MG**2/S) ** Y1
      X2 = (4*MG**2/S/X1) ** Y2
      SHAT = X1*X2*S
      DEL = 1.D-4 * MG**2 * (1D0 -4*MG**2/SHAT)
      BETA = SQRT(1D0 -4*MG**2/SHAT)
      TGHAT = 
     +   -(SHAT -DEL)/2D0 +(Y3 -0.5D0)*SQRT((SHAT-DEL)**2-4*MG**2*SHAT)
      S4GMAX = SHAT +TGHAT +SHAT*MG**2/TGHAT
      S4G = (S4GMAX -DEL)*Y4 +DEL
      PREF  = SHAT*BETA *S4GMAX*LOG(4*MG**2/S)*LOG(4*MG**2/S/X1)
      PREFB = SHAT*BETA *      LOG(4*MG**2/S)*LOG(4*MG**2/S/X1)
      CALL PDFNLOGGT(X1,X2)
      RETURN
      END

C ======================================================================

      SUBROUTINE DTSNLGG()
C***  DEFINES THE KINEMATICS FOR TOTAL CROSS-SECTIONS IN NLO
C***  INCLUDING SUBTRACTION
C***  FILLS UP THE COMMON BLOCK DINLGG3-4,8 
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/VARVEGAS/Y1,Y2,Y3,Y4,Y5
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/DINLGG1/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      COMMON/DINLGG2/SHAT,TGHAT,UGHAT,S4G,PREF,X2,S4GMAX
      COMMON/DINLGG3/SHAT0,TGHAT0,UGHAT0,S4G0,X10,X20,PREF0,S402
      COMMON/DINLGG4/SHAT1,TGHAT1,UGHAT1,S4G1,X11,X21,PREF1,S4GUP
      COMMON/DINLGG8/S4GMAX4,TGHAT4,PREF4
      S4GMAX0 = SHAT - 2.D0*SQRT(SHAT*MG**2)
      TYMIN = ATAN(+M2/GAM)
      TYMAX = ATAN((S4GMAX0+M2)/GAM)
      TY = (TYMAX -TYMIN) * Y3 + TYMIN 
      PREFTY = (TYMAX -TYMIN)/GAM 
      S4G0 = GAM*TAN(TY) - M2
      S4G1 = - M2
      PRETG0 = SQRT( (SHAT-S4G0)**2 -4*MG**2*SHAT )
      PRETG1 = 1
      IF((SHAT-S4G1)**2 -4*MG**2*SHAT.GT.0.D0)THEN
       PRETG1 = SQRT( (SHAT-S4G1)**2 -4*MG**2*SHAT )
      ENDIF
      TGHAT0 = -(SHAT-S4G0)/2.D0 +(Y4 -0.5D0)*PRETG0
      TGHAT1 = -(SHAT-S4G1)/2.D0 +(Y4 -0.5D0)*PRETG1
      PREF0 = PRETG0 * PREFTY*LOG(4*MG**2/S)*LOG(4*MG**2/S/X1)
      PREF1 = PRETG1 * PREFTY*LOG(4*MG**2/S)*LOG(4*MG**2/S/X1)

      SBGHAT4 = SHAT * SQRT(1.D0 -4.D0*MG**2/SHAT)
      TGHAT4  = SQRT(SHAT**2 -4*MG**2*SHAT)*(Y3 -1.D0/2D0) -SHAT/2.D0
      S4GMAX4 = SHAT +TGHAT4 +MG**2*SHAT/TGHAT4
      PREF4   = SBGHAT4 * LOG(4*MG**2/S)*LOG(4*MG**2/S/X1)

      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION EGGGGNLO()
C***  CALCULATES THE DIFFERENTIAL CROSS-SECTION IN NLO FOR G G
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/PDLOGG/PDGGB,PDQBB,PDBQB
      COMMON/PDNLGG1/ PDGG ,PDQB ,PDBQ
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/DINLGG1/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      COMMON/DINLGG2/SHAT,TGHAT,UGHAT,S4G,PREF,X2,S4GMAX
      EGGGGNLO = 
     +        +PDGGB * PREFB * DGGGGB(ALPHAS,SHATB,TGHATB,MS,MG) 
     +        +PDGGB * PREFB * DGGGGV(ALPHAS,SHATB,TGHATB,MS,MG,MT) 
     +        +PDGGB * PREFB * DGGGG1(ALPHAS,SHATB,TGHATB,MS,MG,SCA) 
     +        +PDGGB * PREFB * 
     +        DGGGGD(ALPHAS,SHATB,TGHATB,S4G,MS,MG,DEL,S4GMAX)
     +        +PDGGB * PREFB * 
     +        DGGGG2(ALPHAS,SHATB,TGHATB,S4G,MS,MG,DEL,S4GMAX,SCA)
     +        +PDGG  * PREF  * DGGGGH(ALPHAS,SHAT,TGHAT,S4G,MS,MG) 
     +        +PDGG  * PREF  * DGGGG3(ALPHAS,SHAT,TGHAT,S4G,MS,MG,SCA) 
      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION EGGQBNLO()
C***  CALCULATES THE DIFFERENTIAL CROSS-SECTION IN NLO FOR Q QB
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/PDLOGG/PDGGB,PDQBB,PDBQB
      COMMON/PDNLGG1/ PDGG ,PDQB ,PDBQ
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/DINLGG1/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      COMMON/DINLGG2/SHAT,TGHAT,UGHAT,S4G,PREF,X2,S4GMAX

      PDQBB = PDQBB + PDBQB
      PDQB  = PDQB  + PDBQ

      EGGQBNLO = 
     +        +PDQBB * PREFB * DGGQBB(ALPHAS,SHATB,TGHATB,MS,MG) 
     +        +PDQBB * PREFB * DGGQBV(ALPHAS,SHATB,TGHATB,MS,MG,MT) 
     +        +PDQBB * PREFB * DGGQB1(ALPHAS,SHATB,TGHATB,MS,MG,SCA) 
     +        +PDQBB * PREFB * 
     +        DGGQBD(ALPHAS,SHATB,TGHATB,S4G,MS,MG,DEL,S4GMAX)
     +        +PDQBB * PREFB * 
     +        DGGQB2(ALPHAS,SHATB,TGHATB,S4G,MS,MG,DEL,S4GMAX,SCA)
     +        +PDQB  * PREF  * 
     +        DGGQBH(ALPHAS,SHAT,TGHAT,S4G,MS,MG,EPS) 
     +        +PDQB  * PREF  * 
     +        DGGQB3(ALPHAS,SHAT,TGHAT,S4G,MS,MG,SCA) 
      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION EGGGBNLO()
C***  CALCULATES THE DIFFERENTIAL CROSS-SECTION IN NLO FOR G QB AND G Q
      IMPLICIT REAL*8 (A-H,M-Z)
      EGGGBNLO = 
     +     EGGGBNLOA() + EGGGBNLOB() + EGGGBNLOC() + EGGGBNLOD()
      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION EGGGBNLOA()
C***  CALCULATES PART OF THE DIFFERENTIAL CROSS-SECTION IN NLO FOR G Q
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/DINLGG3/SHAT0,TGHAT0,UGHAT0,S4G0,X10,X20,PREF0,S402
      COMMON/DINLGG4/SHAT1,TGHAT1,UGHAT1,S4G1,X11,X21,PREF1,S4GUP
      COMMON/PDNLGG2/PDGB0,PDGB1, PDBG0,PDBG1
      CALL PDFNLOGG2(X10,X20,X11,X21)
      EGGGBNLOA = 
     +     + PDGB0 * PREF0 * S402 *
     +     DGGGBH(ALPHAS,SHAT0,TGHAT0,S4G0,MS,MG,EPS)
     +     + PDGB0 * PREF0 * S402 * 
     +     DGGGB3(ALPHAS,SHAT0,TGHAT0,S4G0,MS,MG,SCA)
     +     
     +     + PDBG0 * PREF0 * S402 *
     +     DGGGBH(ALPHAS,SHAT0,UGHAT0,S4G0,MS,MG,EPS)
     +     + PDBG0 * PREF0 * S402 * 
     +     DGGGB3(ALPHAS,SHAT0,UGHAT0,S4G0,MS,MG,SCA)
      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION EGGGBNLOB()
C***  CALCULATES PART OF THE DIFFERENTIAL CROSS-SECTION IN NLO FOR G Q
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/PDNLGG2/PDGB0,PDGB1, PDBG0,PDBG1
      COMMON/DINLGG3/SHAT0,TGHAT0,UGHAT0,S4G0,X10,X20,PREF0,S402
      COMMON/DINLGG4/SHAT1,TGHAT1,UGHAT1,S4G1,X11,X21,PREF1,S4GUP

      IF ((SHAT1.GT.(MS+MG)**2).AND.(MS.GT.MG).AND.(S4G0.LE.S4GUP)) 
     +     THEN
         EGGGBNLOB = 
     +        + PDGB0 * PREF0 * 
     +        DGGGBS(ALPHAS,SHAT0,TGHAT0,S4G0,MS,MG,EPS)
     +        - PDGB1 * PREF1 * 
     +        DGGGBS(ALPHAS,SHAT1,TGHAT1,S4G1,MS,MG,EPS)
     +        
     +        + PDBG0 * PREF0 * 
     +        DGGGBS(ALPHAS,SHAT0,UGHAT0,S4G0,MS,MG,EPS)
     +        - PDBG1 * PREF1 * 
     +        DGGGBS(ALPHAS,SHAT1,UGHAT1,S4G1,MS,MG,EPS)
      ELSE
         EGGGBNLOB = 
     +        + PDGB0 * PREF0 * 
     +        DGGGBS(ALPHAS,SHAT0,TGHAT0,S4G0,MS,MG,EPS)
     +        
     +        + PDBG0 * PREF0 * 
     +        DGGGBS(ALPHAS,SHAT0,UGHAT0,S4G0,MS,MG,EPS)
      END IF

      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION EGGGBNLOC()
C***  CALCULATES PART OF THE DIFFERENTIAL CROSS-SECTION IN NLO FOR G Q
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/PDNLGG2/PDGB0,PDGB1, PDBG0,PDBG1
      COMMON/DINLGG5/SHAT2,TGHAT2,UGHAT2,S4G2,X12,X22,PREF2,S3G2,S32
      COMMON/DINLGG6/SHAT3,TGHAT3,UGHAT3,S4G3,X13,X23,PREF3,S33,S3GUP

      CALL PDFNLOGG2(X12,X22,X13,X23)
      IF ((SHAT3.GT.(MS+MG)**2).AND.(MS.GT.MG).AND.(S3G2.LE.S3GUP)) 
     +     THEN
         EGGGBNLOC = 
     +        + PDGB0 * PREF2 *
     +        DGGGBT(ALPHAS,SHAT2,TGHAT2,S4G2,S32,MS,MG,EPS) 
     +        - PDGB1 * PREF3 *
     +        DGGGBT(ALPHAS,SHAT3,TGHAT3,S4G3,S33,MS,MG,EPS) 
     +           
     +        + PDBG0 * PREF2 *
     +        DGGGBT(ALPHAS,SHAT2,UGHAT2,S4G2,S32,MS,MG,EPS) 
     +        - PDBG1 * PREF3 *
     +        DGGGBT(ALPHAS,SHAT3,UGHAT3,S4G3,S33,MS,MG,EPS) 
      ELSE
         EGGGBNLOC = 
     +        + PDGB0 * PREF2 *
     +        DGGGBT(ALPHAS,SHAT2,TGHAT2,S4G2,S32,MS,MG,EPS)
     +        
     +        + PDBG0 * PREF2 *
     +        DGGGBT(ALPHAS,SHAT2,UGHAT2,S4G2,S32,MS,MG,EPS) 
         END IF

      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION EGGGBNLOD()
C***  CALCULATES PART OF THE DIFFERENTIAL CROSS-SECTION IN NLO FOR G Q
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/PDNLGG2/PDGB0,PDGB1, PDBG0,PDBG1
      COMMON/DINLGG7/SHAT4,TGHAT4,UGHAT4,S4GMAX4,PREF4,X14,X24
      
      IF ((SHAT4.GT.(MS+MG)**2).AND.(MS.GT.MG).AND.(S4GMAX4.GE.-M2)) 
     +     THEN
         CALL PDFNLOGG2(X14,X24,X13,X23)
         EGGGBNLOD = 
     +        + PDGB0 * PREF4*
     +        DGGGBU(ALPHAS,SHAT4,TGHAT4,-M2,MS,MG,EPS)
     +        
     +        + PDBG0 * PREF4*
     +        DGGGBU(ALPHAS,SHAT4,UGHAT4,-M2,MS,MG,EPS)
         
      ELSE
         EGGGBNLOD = 0D0
      END IF

      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION FGGGGNLO()
C***  CALCULATES THE TOTAL CROSS-SECTION IN NLO FOR G G
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/PDNLGGT/PDGGT, PDQBT, PDGBT
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/DINLGG1/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      COMMON/DINLGG2/SHAT,TGHAT,UGHAT,S4G,PREF,X2,S4GMAX
      
      FGGGGNLO = 
     +        +PDGGT * PREFB * DGGGGB(ALPHAS,SHAT,TGHAT,MS,MG) 
     +        +PDGGT * PREFB * DGGGGV(ALPHAS,SHAT,TGHAT,MS,MG,MT) 
     +        +PDGGT * PREFB * DGGGG1(ALPHAS,SHAT,TGHAT,MS,MG,SCA) 
     +        +PDGGT * PREFB * 
     +        DGGGGD(ALPHAS,SHAT,TGHAT,S4G,MS,MG,DEL,S4GMAX)
     +        +PDGGT * PREFB * 
     +        DGGGG2(ALPHAS,SHAT,TGHAT,S4G,MS,MG,DEL,S4GMAX,SCA)
     +        +PDGGT * PREF  * DGGGGH(ALPHAS,SHAT,TGHAT,S4G,MS,MG) 
     +        +PDGGT * PREF  * DGGGG3(ALPHAS,SHAT,TGHAT,S4G,MS,MG,SCA) 
      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION FGGQBNLO()
C***  CALCULATES THE TOTAL CROSS-SECTION IN NLO FOR Q QB
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/PDNLGGT/PDGGT, PDQBT, PDGBT
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/DINLGG1/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      COMMON/DINLGG2/SHAT,TGHAT,UGHAT,S4G,PREF,X2,S4GMAX

      FGGQBNLO = 
     +        +PDQBT * PREFB * DGGQBB(ALPHAS,SHAT,TGHAT,MS,MG) 
     +        +PDQBT * PREFB * DGGQBV(ALPHAS,SHAT,TGHAT,MS,MG,MT) 
     +        +PDQBT * PREFB * DGGQB1(ALPHAS,SHAT,TGHAT,MS,MG,SCA) 
     +        +PDQBT * PREFB * 
     +        DGGQBD(ALPHAS,SHAT,TGHAT,S4G,MS,MG,DEL,S4GMAX)
     +        +PDQBT * PREFB * 
     +        DGGQB2(ALPHAS,SHAT,TGHAT,S4G,MS,MG,DEL,S4GMAX,SCA)
     +        +PDQBT * PREF  * 
     +        DGGQBH(ALPHAS,SHAT,TGHAT,S4G,MS,MG,EPS) 
     +        +PDQBT * PREF  * 
     +        DGGQB3(ALPHAS,SHAT,TGHAT,S4G,MS,MG,SCA) 
      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION FGGGBNLO()
C***  CALCULATES THE TOTAL CROSS-SECTION IN NLO FOR G Q 
      IMPLICIT REAL*8 (A-H,M-Z)
      COMMON/CONST1/S,ENERGY,ALPHAS,MS,MG,MT
      COMMON/PDNLGGT/PDGGT, PDQBT, PDGBT
      COMMON/MINLGG/EPS,DEL,SCA,M2,GAM
      COMMON/DINLGG1/SHATB,TGHATB,UGHATB,PREFB,X1,X2B
      COMMON/DINLGG2/SHAT,TGHAT,UGHAT,S4G,PREF,X2,S4GMAX
      COMMON/DINLGG3/SHAT0,TGHAT0,UGHAT0,S4G0,X10,X20,PREF0,S402
      COMMON/DINLGG4/SHAT1,TGHAT1,UGHAT1,S4G1,X11,X21,PREF1,S4GUP
      COMMON/DINLGG8/S4GMAX4,TGHAT4,PREF4
      
      IF ((MS.GT.MG).AND.(SHAT.GT.(MS+MG)**2)) THEN
         FGGGBNLO = 0D0
     +        +PDGBT * PREF *
     +        DGGGBH(ALPHAS,SHAT,TGHAT,S4G,MS,MG,EPS)
     +        +PDGBT * PREF *
     +        DGGGB3(ALPHAS,SHAT,TGHAT,S4G,MS,MG,SCA)
     +        +PDGBT * PREF0 * 2 *
     +        DGGGBS(ALPHAS,SHAT,TGHAT0,S4G0,MS,MG,EPS)
     +        -PDGBT * PREF1 * 2 *
     +        DGGGBS(ALPHAS,SHAT,TGHAT1,S4G1,MS,MG,EPS)
      ELSE
         FGGGBNLO = 0D0
     +        +PDGBT * PREF *
     +        DGGGBH(ALPHAS,SHAT,TGHAT,S4G,MS,MG,EPS)
     +        +PDGBT * PREF *
     +        DGGGB3(ALPHAS,SHAT,TGHAT,S4G,MS,MG,SCA)
     +        +PDGBT * PREF0 * 2 *
     +        DGGGBS(ALPHAS,SHAT,TGHAT0,S4G0,MS,MG,EPS)
      END IF
      
      IF ((S4GMAX4.GE.-M2).AND.(MS.GT.MG).AND.(SHAT.GT.(MS+MG)**2))
     +     FGGGBNLO = FGGGBNLO + PDGBT * PREF4*
     +     DGGGBU(ALPHAS,SHAT,TGHAT4,-M2,MS,MG,EPS)
      
      RETURN
      END

C ======================================================================

      REAL*8 FUNCTION SUMNLOGG(SIGNLOGG1,SIGNLOGG2,SIGNLOGG3,IFLAVOR)
C***  SUMS UP DIFFERENT FLAVOR STATES FOR CROSS-SECTION IN NLO
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I)
      IF (IFLAVOR.EQ.0) SUMNLOGG = SIGNLOGG1 +SIGNLOGG2 +SIGNLOGG3
      IF (IFLAVOR.EQ.1) SUMNLOGG = SIGNLOGG1
      IF (IFLAVOR.EQ.2) SUMNLOGG = SIGNLOGG2
      IF (IFLAVOR.EQ.3) SUMNLOGG = SIGNLOGG3
      IF (IFLAVOR.EQ.4) SUMNLOGG = SIGNLOGG1 +SIGNLOGG2
      IF (IFLAVOR.EQ.5) SUMNLOGG = SIGNLOGG3
      IF (.NOT.(ABS(SUMNLOGG).LT.1.D35)) THEN
         SUMNLOGG = 0.D0
         PRINT *,'NAN'
      END IF
      RETURN
      END
      
C ======================================================================

      SUBROUTINE PDFLOGG(X1,X2)
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I,J)
      DIMENSION XPDF(-6:6)
      DIMENSION YPDF(-6:6)
      COMMON/CONST2/SCALE,SCAFAC,ICOLL,ISCAPT
      COMMON/PDLOGG/ PDGGB,PDQBB,PDBQB
      CALL PARTONDF(X1,SCALE,XPDF)
      CALL PARTONDF(X2,SCALE,YPDF)

      PDGGB = XPDF(0) * YPDF(0)
      PDQBB = 0D0
      PDBQB = 0D0
      IF (ICOLL.EQ.0) THEN
         DO 1000 I= 1,5
            PDQBB = PDQBB + XPDF( I) * YPDF( I) 
            PDBQB = PDBQB + XPDF(-I) * YPDF(-I) 
 1000    CONTINUE
      ELSE IF (ICOLL.EQ.1) THEN
         DO 1010 I= 1,5
            PDQBB = PDQBB + XPDF( I) * YPDF(-I) 
            PDBQB = PDBQB + XPDF(-I) * YPDF( I) 
 1010    CONTINUE
      END IF
      RETURN
      END

C ======================================================================

      SUBROUTINE PDFNLOGGT(X1,X2)
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I,J)
      DIMENSION XPDF(-6:6)
      DIMENSION YPDF(-6:6)
      COMMON/CONST2/SCALE,SCAFAC,ICOLL,ISCAPT
      COMMON/PDNLGGT/PDGGT, PDQBT, PDGBT

      CALL PARTONDF(X1,SCALE,XPDF)
      CALL PARTONDF(X2,SCALE,YPDF)

      PDGGT = XPDF(0) * YPDF(0)
      PDQBT = 0D0
      PDGBT = 0D0

      IF (ICOLL.EQ.0) THEN
         DO 1000 I= 1,5
            PDQBT = PDQBT + XPDF( I) * YPDF( I) + XPDF(-I) * YPDF(-I) 
            PDGBT = PDGBT + XPDF(0)  * YPDF(-I) + XPDF( I) * YPDF( 0) 
     +                    + XPDF(0)  * YPDF(I)  + XPDF(-I) * YPDF( 0) 
 1000    CONTINUE
      ELSE IF (ICOLL.EQ.1) THEN
         DO 1010 I= 1,5
            PDQBT = PDQBT + XPDF( I) * YPDF(-I) + XPDF(-I) * YPDF(I) 
            PDGBT = PDGBT + XPDF(0)  * YPDF(-I) + XPDF( I) * YPDF(0) 
     +                    + XPDF(0)  * YPDF(I)  + XPDF(-I) * YPDF(0) 
 1010    CONTINUE
      END IF
      RETURN
      END

C ======================================================================

      SUBROUTINE PDFNLOGG1(X1,X2,X2B)
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I,J)
      DIMENSION XPDF(-6:6)
      DIMENSION YPDF(-6:6)
      DIMENSION ZPDF(-6:6)
      COMMON/CONST2/SCALE,SCAFAC,ICOLL,ISCAPT
      COMMON/PDLOGG/ PDGGB,PDQBB,PDBQB
      COMMON/PDNLGG1/ PDGG ,PDQB ,PDBQ

      CALL PARTONDF(X1 ,SCALE,XPDF)
      CALL PARTONDF(X2B,SCALE,YPDF)
      CALL PARTONDF(X2 ,SCALE,ZPDF)

      PDGGB = XPDF(0) * YPDF(0)
      PDGG  = XPDF(0) * ZPDF(0)
      PDQBB = 0D0
      PDQB  = 0D0
      PDBQB = 0D0
      PDBQ  = 0D0

      IF (ICOLL.EQ.0) THEN
         DO 1000 I= 1,5
            PDQBB = PDQBB + XPDF( I) * YPDF( I) 
            PDQB  = PDQB  + XPDF( I) * ZPDF( I) 
            PDBQB = PDBQB + XPDF(-I) * YPDF(-I) 
            PDBQ  = PDBQ  + XPDF(-I) * ZPDF(-I) 
 1000    CONTINUE
      ELSE IF (ICOLL.EQ.1) THEN
         DO 1010 I= 1,5
            PDQBB = PDQBB + XPDF( I) * YPDF(-I) 
            PDQB  = PDQB  + XPDF( I) * ZPDF(-I) 
            PDBQB = PDBQB + XPDF(-I) * YPDF( I) 
            PDBQ  = PDBQ  + XPDF(-I) * ZPDF( I) 
 1010    CONTINUE
      END IF
      RETURN
      END

C ======================================================================

      SUBROUTINE PDFNLOGG2(X10,X20,X11,X21)
      IMPLICIT REAL*8 (A-H,M-Z)
      IMPLICIT INTEGER (I,J)
      DIMENSION WPDF(-6:6)
      DIMENSION XPDF(-6:6)
      DIMENSION YPDF(-6:6)
      DIMENSION ZPDF(-6:6)
      COMMON/CONST2/SCALE,SCAFAC,ICOLL,ISCAPT
      COMMON/PDNLGG2/PDGB0,PDGB1, PDBG0,PDBG1

      CALL PARTONDF(X10,SCALE,WPDF)
      CALL PARTONDF(X20,SCALE,XPDF)
      CALL PARTONDF(X11,SCALE,YPDF)
      CALL PARTONDF(X21,SCALE,ZPDF)

      PDGB0 = 0D0
      PDGB1 = 0D0
      PDBG0 = 0D0
      PDBG1 = 0D0

C***  INDEPENDENT OF COLLIDER TYPE (ICOLL)
      DO 1000 I= 1,5
         PDGB0 = PDGB0 + WPDF( 0) * XPDF( I) + WPDF( 0) * XPDF(-I) 
         PDGB1 = PDGB1 + YPDF( 0) * ZPDF( I) + YPDF( 0) * ZPDF(-I) 
         PDBG0 = PDBG0 + WPDF(-I) * XPDF( 0) + WPDF( I) * XPDF( 0) 
         PDBG1 = PDBG1 + YPDF(-I) * ZPDF( 0) + YPDF( I) * ZPDF( 0) 
 1000 CONTINUE

      RETURN
      END

C =====================================================================


