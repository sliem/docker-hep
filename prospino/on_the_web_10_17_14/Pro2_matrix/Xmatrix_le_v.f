cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c                                                                      c
c     THE SCALING FUNCTIONS                                            c
c                                                                      c
c     LE_QGB(MASSIN,LUMI)                                              c
c     LE_QGV(ST,MASSIN,LUMI)                                           c
c     LE_QGD(MASSIN,LUMI)                                              c
c                                                                      c
c     INPUT :                                                          c
c                                                                      c
c       MASSIN(1)  = s                                                 c
c       MASSIN(2)  = t2                                                c
c       MASSIN(6)  = ms1                                               c
c       MASSIN(8)  = mg                                                c
c       MASSIN(9)  = msq                                               c
c       MASSIN(10) = ms2                                               c
c       MASSIN(11) = mt                                                c
c       MASSIN(13) = qf                                                c
c       MASSIN(20) = del                                               c
c       MASSIN(21) = s4p                                               c
c       MASSIN(3-5,8,10,13-19,21-30) not needed                        c
c                                                                      c
c    ALL PHASE SPACE FACTORS INCOUDED TO GIVE                          c
c        s^2 d sig/(dtg ds4)                                           c
c                                                                      c
c    NEEDED MANDELSTAM VARIABLES :                                     c
c                                                                      c
c       Q(K1) + G(K2) -> ST(P1) + L(P2) [+G(K3)]                       c
c                                                                      c
c       S  = 2(K1.K2)                                                  c
c       S3 = 2(K3.P2)                                                  c
c       S4 = 2(K3.K1)                                                  c
c       S5 = 2(P1.P2) + M1^2 + M2^2                                    c
c       T1 = 2(K1.P1)                                                  c
c       U1 = 2(K2.P1)                                                  c
c       TG = 2(K2.P2)                                                  c
c       UG = 2(K1.P2)                                                  c
c       TP = 2(K2.K3)                                                  c
c       UP = 2(K1.K3)                                                  c
c                                                                      c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      real*8 function LE_QGB(massin,lumi)

      implicit none 

      real*8     massin(1:30),lumi(1:3),pi,Nc,Cf,alphas,Ar2,st
     &          ,s,m1,t1,t2,u1,u2,u2s,run_lam

      pi= 4.D0 * atan(1.D0)

      Nc = 3.D0
      Cf = 4.D0/3.D0

      run_lam = 0.D0

c               gs**2=4*pi*alpha_s is cut, re-appears as nlo later 
      alphas = 1.D0/4.D0/pi
      Ar2    = 1.D0
      st     = 1.D0

      s  = massin(1)
      t2 = massin(2)
      m1 = massin(6)

      t1  = t2 - m1**2
      
      u1  = - s - t2 
      u2  = u1 + m1**2
      u2s = u2 - m1**2 

c               the form output 
      LE_QGB = 0.D0

      LE_QGB = LE_QGB + Ar2*Nc*Cf*st**2*Pi*alphas * (
     +     - 16*s**(-1)*t1*t2*u2s**(-1)
     +     - 32*s**(-1)*t1*u2*u2s**(-1)
     +     - 16*s**(-1)*t2
     +     - 16*s**(-1)*u2
     +     + 16*s*u2s**(-1)
     +     + 32*m1**2*u2*u2s**(-2)
     +     - 16*m1**2*u2s**(-1)
     +     )

c         include the running of lambda'
c              where massin(30)=alpha_s
      LE_QGB = LE_QGB /(1.D0 
     &                + run_lam*massin(30)/pi
     &                     *log(massin(12)**2/m1**2) )

c               the prefactor for the scaling functions 
c                   alpha is cut out of the typical couplings 
      LE_QGB = LE_QGB * m1**2/4.D0

c               the phase space except for 1/s**2 
      LE_QGB = LE_QGB / ( 16.D0 * pi )

c               in this case multiply luminosity by hand
      LE_QGB = LE_QGB * lumi(1)

c               the averaging factors
      LE_QGB = LE_QGB /4.D0 /Nc /(Nc**2-1.D0)

      return
      end

c --------------------------------------------------------------------
      real*8 function LE_QGD(massin,lumi)

      implicit none 

      real*8     massin(1:30),lumi(1:3),pi,Nc,Cf,Nf,alphas,Ar2,st
     &          ,del,log_del,log2_del,u,u2
     &          ,s,m1,t1,t2,u1,s4,s4p,log_qf
     &          ,prefac,MM_d

      pi= 4.D0 * atan(1.D0)

      Nc = 3.D0
      Cf = 4.D0/3.D0
      Nf    = 6.D0
      
c               gs**2=4*pi*alpha_s is cut, re-appears as nlo later 
      prefac = 1.D0/16.D0/pi**2 
      alphas = 1.D0/4.D0/pi
      Ar2    = 1.D0
      st     = 1.D0

      s   = massin(1)
      t2  = massin(2)
      s4  = massin(3)
      m1  = massin(6)
      del = massin(20)
      s4p = massin(21)

c               the factorization scale 
      log_qf = log( massin(13)**2/m1**2 ) 

c               the logaritms for linear s4 integration 
      log_del  =  log(s4p/m1**2)/(s4p-del) - 1.D0/s4
      log2_del =  log(s4p/m1**2)**2/(s4p-del) 
     &          - 2.D0*log(s4/m1**2)/s4

c               born type kinematics built in
      t1  = t2 - m1**2 
      u1  = - s - t2 
      u2  = u1 + m1**2 
      u   = u2 

      MM_d =
     +  + Ar2*Nc*Cf*st**2*Pi**2*alphas**2*prefac*log_del * (  - 1280./3.
     +    *s**(-1)*(Nf-1)*m1**2*t1*u1**(-1) - 1792./3.*s**(-1)*(Nf-1)*
     +    m1**2 - 1024./3.*s**(-1)*(Nf-1)*m1**4*u1**(-1) - 1024./3.*
     +    s**(-1)*(Nf-1)*t1 - 256./3.*s**(-1)*(Nf-1)*t1**2*u1**(-1) - 
     +    256*s**(-1)*(Nf-1)*u1 - 1024./3.*(Nf-1)*m1**2*u1**(-1) - 256./
     +    3.*(Nf-1)*t1*u1**(-1) - 256*(Nf-1) )
      MM_d = MM_d + Ar2*Nc*Cf**2*st**2*Pi**2*alphas**2*prefac*log_del
     +  * ( 640 + 1920*s**(-1)*m1**2*t1*u1**(-1) + 1536*s**(-1)*m1**2
     +     + 2176*s**(-1)*t1 + 640*s**(-1)*t1**2*u1**(-1) + 640*s**(-1)
     +    *u1 + 512*m1**2*u1**(-1) - 768*m1**4*u1**(-2) + 640*t1*
     +    u1**(-1) )
      MM_d = MM_d + Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac*log_del*
     + log_qf * (  - 768 - 768*s**(-1)*m1**2*t1*u1**(-1) - 1920*s**(-1)
     +    *m1**2 - 1536*s**(-1)*m1**4*u1**(-1) - 384*s**(-1)*t1 - 768*
     +    s**(-1)*u1 - 1536*m1**2*u1**(-1) - 768*m1**4*u1**(-2) )
      MM_d = MM_d + Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac*log_del
     +  * ( 1632 + 96*s**(-1)*u**(-1)*m1**2*t1 + 32*s**(-1)*u**(-1)*
     +    m1**2*t1**2*u1**(-1) + 160*s**(-1)*u**(-1)*m1**2*u1 + 96*
     +    s**(-1)*u**(-1)*m1**4*t1*u1**(-1) - 32*s**(-1)*u**(-1)*m1**4
     +     - 192*s**(-1)*u**(-1)*m1**6*u1**(-1) + 32*s**(-1)*u**(-1)*
     +    t1**2 + 9632./3.*s**(-1)*m1**2*t1*u1**(-1) + 736*s**(-1)*
     +    m1**2*t1**2*u1**(-2) - 128*s**(-1)*m1**2*t1**3*u1**(-3) + 
     +    11008./3.*s**(-1)*m1**2 + 992*s**(-1)*m1**4*t1*u1**(-2) - 192
     +    *s**(-1)*m1**4*t1**2*u1**(-3) + 9472./3.*s**(-1)*m1**4*
     +    u1**(-1) - 128*s**(-1)*m1**6*t1*u1**(-3) + 416*s**(-1)*m1**6*
     +    u1**(-2) - 32*s**(-1)*m1**8*u1**(-3) + 5536./3.*s**(-1)*t1 + 
     +    2080./3.*s**(-1)*t1**2*u1**(-1) + 160*s**(-1)*t1**3*u1**(-2)
     +     - 32*s**(-1)*t1**4*u1**(-3) + 1632*s**(-1)*u1 + 32*u**(-1)*
     +    m1**2*t1*u1**(-1) - 64*u**(-1)*m1**2 - 192*u**(-1)*m1**4*
     +    u1**(-1) - 128*u**(-1)*m1**6*u1**(-2) + 32*u**(-1)*t1 + 640*
     +    m1**2*t1*u1**(-2) )
      MM_d = MM_d + Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac*log_del
     +  * (  - 96*m1**2*t1**2*u1**(-3) + 6976./3.*m1**2*u1**(-1) - 96*
     +    m1**4*t1*u1**(-3) + 704*m1**4*u1**(-2) - 32*m1**6*u1**(-3) + 
     +    1504./3.*t1*u1**(-1) + 192*t1**2*u1**(-2) - 32*t1**3*u1**(-3)
     +     )
      MM_d = MM_d + Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac*log2_del
     +  * ( 1536 + 2528*s**(-1)*m1**2*t1*u1**(-1) + 800*s**(-1)*m1**2*
     +    t1**2*u1**(-2) + 512*s**(-1)*m1**2*t1**3*u1**(-3) + 4096*
     +    s**(-1)*m1**2 + 1504*s**(-1)*m1**4*t1*u1**(-2) + 960*s**(-1)*
     +    m1**4*t1**2*u1**(-3) + 3648*s**(-1)*m1**4*u1**(-1) + 768*
     +    s**(-1)*m1**6*t1*u1**(-3) + 928*s**(-1)*m1**6*u1**(-2) + 224*
     +    s**(-1)*m1**8*u1**(-3) + 1248*s**(-1)*t1 + 224*s**(-1)*t1**2*
     +    u1**(-1) + 224*s**(-1)*t1**3*u1**(-2) + 96*s**(-1)*t1**4*
     +    u1**(-3) + 1536*s**(-1)*u1 + 256*m1**2*t1*u1**(-2) + 416*
     +    m1**2*t1**2*u1**(-3) + 2944*m1**2*u1**(-1) + 544*m1**4*t1*
     +    u1**(-3) + 1472*m1**4*u1**(-2) + 224*m1**6*u1**(-3) + 96*t1*
     +    u1**(-1) + 128*t1**2*u1**(-2) + 96*t1**3*u1**(-3) )
      MM_d = MM_d + Ar2*Cf*st**2*Pi**2*alphas**2*prefac*log_del*log_qf
     +  * ( 256 + 256*s**(-1)*m1**2*t1*u1**(-1) + 640*s**(-1)*m1**2 + 
     +    512*s**(-1)*m1**4*u1**(-1) + 128*s**(-1)*t1 + 256*s**(-1)*u1
     +     + 512*m1**2*u1**(-1) + 256*m1**4*u1**(-2) )
      MM_d = MM_d + Ar2*Cf*st**2*Pi**2*alphas**2*prefac*log_del * (  - 
     +    448 - 64*s**(-1)*u**(-1)*m1**2*u1 + 64*s**(-1)*u**(-1)*m1**6*
     +    u1**(-1) + 384*s**(-1)*m1**2*t1**(-2)*u1**2 - 64*s**(-1)*
     +    m1**2*t1**(-1)*u1 - 384*s**(-1)*m1**2*t1*u1**(-1) - 1024*
     +    s**(-1)*m1**2 + 384*s**(-1)*m1**4*t1**(-2)*u1 - 64*s**(-1)*
     +    m1**4*t1**(-1) - 832*s**(-1)*m1**4*u1**(-1) + 128*s**(-1)*
     +    m1**6*t1**(-2) + 128*s**(-1)*t1**(-2)*u1**3 - 128*s**(-1)*t1
     +     - 576*s**(-1)*u1 + 256*m1**2*t1**(-2)*u1 - 192*m1**2*
     +    t1**(-1) - 512*m1**2*u1**(-1) + 128*m1**4*t1**(-2) - 128*
     +    m1**4*u1**(-2) + 128*t1**(-2)*u1**2 - 128*t1**(-1)*u1 )
      MM_d = MM_d + Ar2*Cf*st**2*Pi**2*alphas**2*prefac*log2_del * ( 
     +     - 384 + 256*s**(-1)*m1**2*t1**(-3)*u1**3 + 192*s**(-1)*m1**2
     +    *t1**(-2)*u1**2 - 192*s**(-1)*m1**2*t1**(-1)*u1 - 512*s**(-1)
     +    *m1**2*t1*u1**(-1) - 1152*s**(-1)*m1**2 + 384*s**(-1)*m1**4*
     +    t1**(-3)*u1**2 + 192*s**(-1)*m1**4*t1**(-2)*u1 - 256*s**(-1)*
     +    m1**4*t1**(-1) - 896*s**(-1)*m1**4*u1**(-1) + 256*s**(-1)*
     +    m1**6*t1**(-3)*u1 + 64*s**(-1)*m1**6*t1**(-2) - 128*s**(-1)*
     +    m1**6*t1**(-1)*u1**(-1) + 64*s**(-1)*m1**8*t1**(-3) + 64*
     +    s**(-1)*t1**(-3)*u1**4 + 64*s**(-1)*t1**(-2)*u1**3 - 64*
     +    s**(-1)*t1**(-1)*u1**2 - 256*s**(-1)*t1 - 448*s**(-1)*u1 + 
     +    192*m1**2*t1**(-3)*u1**2 - 128*m1**2*t1**(-1) - 768*m1**2*
     +    u1**(-1) + 192*m1**4*t1**(-3)*u1 - 128*m1**4*t1**(-1)*
     +    u1**(-1) - 256*m1**4*u1**(-2) + 64*m1**6*t1**(-3) + 64*
     +    t1**(-3)*u1**3 - 64*t1**(-1)*u1 )
      MM_d = MM_d + log(s*m1**(-2))*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2
     + *prefac*log_del * (  - 128 - 768*s**(-1)*m1**2*t1*u1**(-1) - 512
     +    *s**(-1)*m1**2 - 384*s**(-1)*m1**4*t1*u1**(-2) - 512*s**(-1)*
     +    m1**4*u1**(-1) - 384*s**(-1)*m1**6*u1**(-2) - 512*s**(-1)*t1
     +     - 128*s**(-1)*t1**2*u1**(-1) - 128*s**(-1)*u1 - 128*m1**2*
     +    u1**(-1) + 128*m1**4*u1**(-2) - 128*t1*u1**(-1) )
      MM_d = MM_d + log( - m1**(-2)*t1)*Ar2*Nc**2*Cf*st**2*Pi**2*
     + alphas**2*prefac*log_del * (  - 512 - 512*s**(-1)*m1**2*t1*
     +    u1**(-1) - 1280*s**(-1)*m1**2 - 1024*s**(-1)*m1**4*u1**(-1)
     +     - 256*s**(-1)*t1 - 512*s**(-1)*u1 - 1024*m1**2*u1**(-1) - 
     +    512*m1**4*u1**(-2) )
      MM_d = MM_d + log( - m1**(-2)*t1)*Ar2*Cf*st**2*Pi**2*alphas**2*
     + prefac*log_del * ( 256 - 512*s**(-1)*m1**2*t1**(-3)*u1**3 - 384*
     +    s**(-1)*m1**2*t1**(-2)*u1**2 + 384*s**(-1)*m1**2*t1**(-1)*u1
     +     + 512*s**(-1)*m1**2*t1*u1**(-1) - 256*s**(-1)*m1**2*u1*
     +    t2**(-1) + 768*s**(-1)*m1**2 - 768*s**(-1)*m1**4*t1**(-3)*
     +    u1**2 - 384*s**(-1)*m1**4*t1**(-2)*u1 + 512*s**(-1)*m1**4*
     +    t1**(-1) + 512*s**(-1)*m1**4*u1**(-1) - 256*s**(-1)*m1**4*
     +    t2**(-1) - 512*s**(-1)*m1**6*t1**(-3)*u1 - 128*s**(-1)*m1**6*
     +    t1**(-2) + 256*s**(-1)*m1**6*t1**(-1)*u1**(-1) - 128*s**(-1)*
     +    m1**8*t1**(-3) - 128*s**(-1)*t1**(-3)*u1**4 - 128*s**(-1)*
     +    t1**(-2)*u1**3 + 128*s**(-1)*t1**(-1)*u1**2 + 256*s**(-1)*t1
     +     + 384*s**(-1)*u1 - 384*m1**2*t1**(-3)*u1**2 + 256*m1**2*
     +    t1**(-1) + 512*m1**2*u1**(-1) - 256*m1**2*t2**(-1) - 384*
     +    m1**4*t1**(-3)*u1 + 256*m1**4*t1**(-1)*u1**(-1) - 256*m1**4*
     +    u1**(-1)*t2**(-1) - 128*m1**6*t1**(-3) - 128*t1**(-3)*u1**3
     +     + 128*t1**(-1)*u1 )
      MM_d = MM_d + log( - m1**(-2)*u1)*Ar2*Nc**2*Cf*st**2*Pi**2*
     + alphas**2*prefac*log_del * (  - 768 - 1344*s**(-1)*m1**2*t1*
     +    u1**(-1) - 1600*s**(-1)*m1**2*t1**2*u1**(-2) + 128*s**(-1)*
     +    m1**2*t1**2*u1**(-1)*u2**(-1) - 1024*s**(-1)*m1**2*t1**3*
     +    u1**(-3) - 2048*s**(-1)*m1**2 - 2624*s**(-1)*m1**4*t1*
     +    u1**(-2) + 128*s**(-1)*m1**4*t1*u1**(-1)*u2**(-1) - 1920*
     +    s**(-1)*m1**4*t1**2*u1**(-3) - 2432*s**(-1)*m1**4*u1**(-1) - 
     +    1536*s**(-1)*m1**6*t1*u1**(-3) - 1472*s**(-1)*m1**6*u1**(-2)
     +     - 448*s**(-1)*m1**8*u1**(-3) - 448*s**(-1)*t1 - 192*s**(-1)*
     +    t1**2*u1**(-1) - 448*s**(-1)*t1**3*u1**(-2) - 192*s**(-1)*
     +    t1**4*u1**(-3) - 768*s**(-1)*u1 - 512*m1**2*t1*u1**(-2) + 128
     +    *m1**2*t1*u1**(-1)*u2**(-1) - 832*m1**2*t1**2*u1**(-3) - 1664
     +    *m1**2*u1**(-1) + 128*m1**2*u2**(-1) - 1088*m1**4*t1*u1**(-3)
     +     - 1536*m1**4*u1**(-2) + 256*m1**4*u1**(-1)*u2**(-1) - 448*
     +    m1**6*u1**(-3) + 64*t1*u1**(-1) - 256*t1**2*u1**(-2) - 192*
     +    t1**3*u1**(-3) )
      MM_d = MM_d + log( - m1**(-2)*u1)*Ar2*Cf*st**2*Pi**2*alphas**2*
     + prefac*log_del * ( 128*s**(-1)*m1**2*t1**(-1)*u1 - 256*s**(-1)*
     +    m1**2*t1*u1**(-1) - 128*s**(-1)*m1**2*t1**2*u1**(-1)*u2**(-1)
     +     + 384*s**(-1)*m1**4*t1**(-1) - 128*s**(-1)*m1**4*t1*u1**(-1)
     +    *u2**(-1) + 256*s**(-1)*m1**6*t1**(-1)*u1**(-1) + 128*m1**2*
     +    t1**(-1) - 128*m1**2*t1*u1**(-1)*u2**(-1) - 128*m1**2*
     +    u2**(-1) + 256*m1**4*t1**(-1)*u1**(-1) - 256*m1**4*u1**(-1)*
     +    u2**(-1) )

c               the prefactor for the scaling functions 
c                   alpha is cut out of the typical couplings 
      LE_QGD = MM_d * m1**2/4.D0

c               the phase space except for 1/s**2 
      LE_QGD = LE_QGD / ( 16.D0 * pi )

c               in this case multiply luminosity by hand
      LE_QGD = LE_QGD * lumi(1)

c               the averaging factors
      LE_QGD = LE_QGD /4.D0 /Nc /(Nc**2-1.D0)

      return
      end

c --------------------------------------------------------------------
      real*8 function LE_QGV(st,massin,lumi)

      implicit none 

      real*8     massin(1:30),lumi(1:3),pi,Nc,Cf,Ns,Nf,alphas,Ar2
     &          ,st,ct,s2t,c2t,zeta2
     &          ,s,m1,m2,mg,mt,msx,ms2,t1,t2,u1,u2,u,u2s,log_qf
     &          ,prefac,MM_v,born_s,born_u,kaellen,Li2
     &          ,susy,susy2
     &          ,LE_QGBs,LE_QGBu
     &          ,SCB(1:10,1:6),SCBP(1:10)
     &          ,SCC(1:20,1:4),SCD(1:10,1:2)
      complex*16 CSPEN

      external CSPEN
      
c               real part of the spence function included in D04
      Li2(s) = real( CSPEN(dcmplx(s)) )

      susy  = 0.D0
      susy2 = 0.D0
      pi = 4.D0 * atan(1.D0)

      Nc    = 3.D0
      Cf    = 4.D0/3.D0
      Ns    = 6.D0
      Nf    = 6.D0
      zeta2 = pi**2/6.D0
      
c               gs**2=4*pi*alpha_s is cut, re-appears as nlo later 
      prefac = 1.D0/16.D0/pi**2 
      alphas = 1.D0/4.D0/pi
      Ar2    = 1.D0

c               now here the stop mixing angle is necessary 
      ct     = sqrt( 1.D0 - st**2 )
      s2t    = 2.D0*st*ct
      c2t    = ct**2 - st**2 

c               mt can also be mq, dependent on incoming quark
      s   = massin(1)
      t2  = massin(2)
      m1  = massin(6)
      m2  = 0.D0
      mg  = massin(8)
      msx = massin(9)
      ms2 = massin(10)
      mt  = massin(11)

c               the factorization scale 
      log_qf = log( massin(13)**2/m1**2 ) 

c               born kinematics built in
      t1  = t2 - m1**2
      
      u1  = - s - t2 
      u2  = u1 + m1**2
      u   = u2 + m2**2 
      u2s = u2 - m1**2 

      kaellen = s**2+m1**4+m2**4- 2.D0*( s*m1**2+s*m2**2+m1**2*m2**2 )

c               the parts of the born matrix element 
      LE_QGBs = 0.D0

      LE_QGBs = LE_QGBs + Ar2*Nc*Cf*st**2*Pi*alphas * (
     +     - 8*s**(-1)*t1*t2*u2s**(-1)
     +     - 16*s**(-1)*t1*u2*u2s**(-1)
     +     - 16*s**(-1)*t2
     +     - 8*s**(-1)*u2
     +     + 8*s*u2s**(-1)
     +     - 8*m1**2*u2s**(-1)
     +     )

      LE_QGBu = 0.D0

      LE_QGBu = LE_QGBu + Ar2*Nc*Cf*st**2*Pi*alphas * (
     +     - 8*s**(-1)*t1*t2*u2s**(-1)
     +     - 16*s**(-1)*t1*u2*u2s**(-1)
     +     - 8*s**(-1)*u2
     +     + 8*s*u2s**(-1)
     +     + 32*m1**2*u2*u2s**(-2)
     +     - 8*m1**2*u2s**(-1)
     +     )

      born_s = LE_QGBs
      born_u = LE_QGBu

      call SCALAR_ARRAY_LE(massin,SCB,SCBP,SCC,SCD)

c               the form output 
c               replace [born_u],[born_s] -> born_u,born_s
c               replace [] -> ()

      MM_v =
     +  + susy*Ar2*Nc*Cf**2*st**2*Pi**2*alphas**2*prefac * (  - 128*
     +    s**(-1)*m1**2 - 128*s**(-1)*t1 )
      MM_v = MM_v + susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +    32 - 160*s**(-2)*m1**2*mg**2*t1*u1**(-1) + 64*s**(-2)*m1**2*
     +    mg**2 + 160*s**(-2)*m1**2*msx**2*t1*u1**(-1) - 64*s**(-2)*
     +    m1**2*msx**2 - 32*s**(-2)*mg**2*t1 - 64*s**(-2)*mg**2*t1**2*
     +    u1**(-1) + 32*s**(-2)*msx**2*t1 + 64*s**(-2)*msx**2*t1**2*
     +    u1**(-1) + 64*s**(-1)*u**(-1)*m1**2*mg**2 - 64*s**(-1)*
     +    u**(-1)*m1**2*mt**2 + 64*s**(-1)*u**(-1)*m1**4*mg**2*u1**(-1)
     +     - 64*s**(-1)*u**(-1)*m1**4*mt**2*u1**(-1) - 64*s**(-1)*m1**2
     +    *mg**2*u1**(-1) + 64*s**(-1)*m1**2*mt**2*u1**(-1) + 32*
     +    s**(-1)*m1**2*t1*u1**(-1) + 160*s**(-1)*m1**2 + 128*s**(-1)*
     +    t1 + 32*s**(-1)*t1**2*u1**(-1) + 32*s**(-1)*u1 + 64*m1**2*
     +    u1**(-1) + 32*t1*u1**(-1) )
      MM_v = MM_v + susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 32 + 
     +    160*s**(-2)*m1**2*mg**2*t1*u1**(-1) - 64*s**(-2)*m1**2*mg**2
     +     - 160*s**(-2)*m1**2*msx**2*t1*u1**(-1) + 64*s**(-2)*m1**2*
     +    msx**2 + 32*s**(-2)*mg**2*t1 + 64*s**(-2)*mg**2*t1**2*
     +    u1**(-1) - 32*s**(-2)*msx**2*t1 - 64*s**(-2)*msx**2*t1**2*
     +    u1**(-1) + 64*s**(-1)*u**(-1)*m1**2*mg**2 - 64*s**(-1)*
     +    u**(-1)*m1**2*mt**2 + 64*s**(-1)*u**(-1)*m1**4*mg**2*u1**(-1)
     +     - 64*s**(-1)*u**(-1)*m1**4*mt**2*u1**(-1) - 64*s**(-1)*m1**2
     +    *mg**2*u1**(-1) + 64*s**(-1)*m1**2*mt**2*u1**(-1) + 32*
     +    s**(-1)*m1**2*t1*u1**(-1) + 32*s**(-1)*m1**2 + 32*s**(-1)*
     +    t1**2*u1**(-1) + 32*s**(-1)*u1 + 64*m1**2*u1**(-1) + 32*t1*
     +    u1**(-1) )
      MM_v = MM_v + susy*Cf*Pi*alphas*prefac * ( 8*s**(-1)*mg**2*
     +    born_s - 8*s**(-1)*msx**2*born_s )
      MM_v = MM_v + zeta2*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 168 + 192*s**(-2)*m1**2*t1 + 384*s**(-2)*m1**2*u1 + 192*
     +    s**(-2)*m1**4 + 192*s**(-2)*t1*u1 + 192*s**(-2)*u1**2 + 240*
     +    s**(-1)*m1**2*t1*u1**(-1) + 96*s**(-1)*m1**2*t1**2*u1**(-2)
     +     - 144*s**(-1)*m1**2 + 456*s**(-1)*m1**4*t1*u1**(-2) - 96*
     +    s**(-1)*m1**4*u1**(-1) + 360*s**(-1)*m1**6*u1**(-2) + 144*
     +    s**(-1)*t1 + 24*s**(-1)*t1**2*u1**(-1) + 24*s**(-1)*u1 + 96*
     +    m1**2*t1*u1**(-2) - 456*m1**2*u1**(-1) - 216*m1**4*u1**(-2)
     +     + 24*t1*u1**(-1) )
      MM_v = MM_v + zeta2*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 96 - 
     +    600*s**(-1)*m1**2*t1**(-1)*u1 - 240*s**(-1)*m1**2 - 792*
     +    s**(-1)*m1**4*t1**(-1) - 168*s**(-1)*m1**4*u1**(-1) - 360*
     +    s**(-1)*m1**6*t1**(-1)*u1**(-1) - 168*s**(-1)*t1**(-1)*u1**2
     +     - 72*s**(-1)*u1 - 432*m1**2*t1**(-1) + 192*m1**2*u1**(-1) - 
     +    360*m1**4*t1**(-1)*u1**(-1) + 192*m1**4*u1**(-2) - 168*
     +    t1**(-1)*u1 )
      MM_v = MM_v + Ar2*Nc*Cf*st**2*Pi**2*alphas**2*prefac*log_qf * ( 
     +    256./3.*s**(-1)*(Nf-1)*m1**2*t1*u1**(-1) + 640./3.*s**(-1)*
     +    (Nf-1)*m1**2 + 512./3.*s**(-1)*(Nf-1)*m1**4*u1**(-1) + 128./3.
     +    *s**(-1)*(Nf-1)*t1 + 256./3.*s**(-1)*(Nf-1)*u1 + 512./3.*
     +    (Nf-1)*m1**2*u1**(-1) + 256./3.*(Nf-1)*m1**4*u1**(-2) + 256./
     +    3.*(Nf-1) )
      MM_v = MM_v + Ar2*Nc*Cf**2*st**2*Pi**2*alphas**2*prefac * (  - 64
     +     - 192*s**(-1)*m1**2*t1*u1**(-1) - 512*s**(-1)*m1**2 - 576*
     +    s**(-1)*t1 - 64*s**(-1)*t1**2*u1**(-1) - 64*s**(-1)*u1 - 128*
     +    m1**2*u1**(-1) - 64*t1*u1**(-1) )
      MM_v = MM_v + Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac*log_qf
     +  * (  - 1984./3. - 1984./3.*s**(-1)*m1**2*t1*u1**(-1) - 4960./3.
     +    *s**(-1)*m1**2 - 3968./3.*s**(-1)*m1**4*u1**(-1) - 992./3.*
     +    s**(-1)*t1 - 1984./3.*s**(-1)*u1 - 3968./3.*m1**2*u1**(-1) - 
     +    1984./3.*m1**4*u1**(-2) )
      MM_v = MM_v + Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac * ( 960
     +     - 32*s**(-1)*u**(-1)*m1**4 - 32*s**(-1)*u**(-1)*m1**6*
     +    u1**(-1) + 448*s**(-1)*m1**(-2)*t1*u1 + 192*s**(-1)*m1**(-2)*
     +    t1**2 + 256*s**(-1)*m1**(-2)*u1**2 + 1088*s**(-1)*m1**2*t1*
     +    u1**(-1) - 96*s**(-1)*m1**2*t1**2*u1**(-2) + 2048*s**(-1)*
     +    m1**2 - 96*s**(-1)*m1**4*t1*u1**(-2) + 1056*s**(-1)*m1**4*
     +    u1**(-1) - 32*s**(-1)*m1**6*u1**(-2) + 1536*s**(-1)*t1 + 256*
     +    s**(-1)*t1**2*u1**(-1) - 32*s**(-1)*t1**3*u1**(-2) + 1216*
     +    s**(-1)*u1 + 192*m1**(-2)*t1 + 256*m1**(-2)*u1 - 64*m1**2*t1*
     +    u1**(-2) + 1056*m1**2*u1**(-1) + 224*m1**4*u1**(-2) + 288*t1*
     +    u1**(-1) - 32*t1**2*u1**(-2) )
      MM_v = MM_v + Ar2*Cf*st**2*Pi**2*alphas**2*prefac*log_qf * ( 192
     +     + 192*s**(-1)*m1**2*t1*u1**(-1) + 480*s**(-1)*m1**2 + 384*
     +    s**(-1)*m1**4*u1**(-1) + 96*s**(-1)*t1 + 192*s**(-1)*u1 + 384
     +    *m1**2*u1**(-1) + 192*m1**4*u1**(-2) )
      MM_v = MM_v + Ar2*Cf*st**2*Pi**2*alphas**2*prefac * (  - 1024 + 
     +    32*s**(-1)*u**(-1)*m1**4 + 32*s**(-1)*u**(-1)*m1**6*u1**(-1)
     +     - 448*s**(-1)*m1**(-2)*t1*u1 - 192*s**(-1)*m1**(-2)*t1**2 - 
     +    256*s**(-1)*m1**(-2)*u1**2 - 1152*s**(-1)*m1**2*t1*u1**(-1)
     +     - 2208*s**(-1)*m1**2 - 1056*s**(-1)*m1**4*u1**(-1) - 1632*
     +    s**(-1)*t1 - 320*s**(-1)*t1**2*u1**(-1) - 1280*s**(-1)*u1 - 
     +    192*m1**(-2)*t1 - 256*m1**(-2)*u1 - 1152*m1**2*u1**(-1) - 256
     +    *m1**4*u1**(-2) - 320*t1*u1**(-1) )
      MM_v = MM_v + log(s*m1**(-2))*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2
     + *prefac * (  - 128*s**(-2)*m1**2*t1 - 256*s**(-2)*m1**2*u1 - 128
     +    *s**(-2)*m1**4 - 128*s**(-2)*t1*u1 - 128*s**(-2)*u1**2 - 128*
     +    s**(-1)*m1**2 - 128*s**(-1)*u1 )
      MM_v = MM_v + log( - m1**(-2)*t1)*Ar2*Nc**2*Cf*st**2*Pi**2*
     + alphas**2*prefac*log_qf * ( 256 + 256*s**(-1)*m1**2*t1*u1**(-1)
     +     + 640*s**(-1)*m1**2 + 512*s**(-1)*m1**4*u1**(-1) + 128*
     +    s**(-1)*t1 + 256*s**(-1)*u1 + 512*m1**2*u1**(-1) + 256*m1**4*
     +    u1**(-2) )
      MM_v = MM_v + log( - m1**(-2)*t1)*Ar2*Nc**2*Cf*st**2*Pi**2*
     + alphas**2*prefac * ( 128*s**(-2)*m1**2*t1 + 256*s**(-2)*m1**2*u1
     +     + 128*s**(-2)*m1**4 + 128*s**(-2)*t1*u1 + 128*s**(-2)*u1**2
     +     + 128*s**(-1)*m1**2 + 128*s**(-1)*u1 )
      MM_v = MM_v + log( - m1**(-2)*t1)*Ar2*Cf*st**2*Pi**2*alphas**2*
     + prefac*log_qf * (  - 256 - 256*s**(-1)*m1**2*t1*u1**(-1) - 640*
     +    s**(-1)*m1**2 - 512*s**(-1)*m1**4*u1**(-1) - 128*s**(-1)*t1
     +     - 256*s**(-1)*u1 - 512*m1**2*u1**(-1) - 256*m1**4*u1**(-2) )
      MM_v = MM_v + log( - m1**(-2)*t1)*Ar2*Cf*st**2*Pi**2*alphas**2*
     + prefac * ( 64 + 64*s**(-1)*m1**2*t1**(-1)*u1 + 128*s**(-1)*m1**2
     +     + 64*s**(-1)*m1**4*t1**(-1) + 64*s**(-1)*t1 + 64*s**(-1)*u1
     +     + 64*m1**2*t1**(-1) )
      MM_v = MM_v + log( - m1**(-2)*u1)*Ar2*Nc**2*Cf*st**2*Pi**2*
     + alphas**2*prefac*log_qf * ( 512 + 512*s**(-1)*m1**2*t1*u1**(-1)
     +     + 1280*s**(-1)*m1**2 + 1024*s**(-1)*m1**4*u1**(-1) + 256*
     +    s**(-1)*t1 + 512*s**(-1)*u1 + 1024*m1**2*u1**(-1) + 512*m1**4
     +    *u1**(-2) )
      MM_v = MM_v + log( - m1**(-2)*u1)*Ar2*Nc**2*Cf*st**2*Pi**2*
     + alphas**2*prefac * (  - 32 + 128*s**(-2)*m1**2*t1 + 256*s**(-2)*
     +    m1**2*u1 + 128*s**(-2)*m1**4 + 128*s**(-2)*t1*u1 + 128*
     +    s**(-2)*u1**2 - 128*s**(-1)*m1**2*t1*u1**(-1) + 96*s**(-1)*
     +    m1**2*t1**2*u1**(-2) + 128*s**(-1)*m1**2*t1**3*u1**(-3) + 32*
     +    s**(-1)*m1**2 + 96*s**(-1)*m1**4*t1*u1**(-2) + 192*s**(-1)*
     +    m1**4*t1**2*u1**(-3) - 64*s**(-1)*m1**4*u1**(-1) + 128*
     +    s**(-1)*m1**6*t1*u1**(-3) + 32*s**(-1)*m1**6*u1**(-2) + 32*
     +    s**(-1)*m1**8*u1**(-3) - 96*s**(-1)*t1 - 64*s**(-1)*t1**2*
     +    u1**(-1) + 32*s**(-1)*t1**3*u1**(-2) + 32*s**(-1)*t1**4*
     +    u1**(-3) + 96*s**(-1)*u1 + 96*m1**2*t1**2*u1**(-3) - 64*m1**2
     +    *u1**(-1) + 96*m1**4*t1*u1**(-3) + 32*m1**6*u1**(-3) - 64*t1*
     +    u1**(-1) + 32*t1**3*u1**(-3) )
      MM_v = MM_v + Li2(1 - s**(-1)*m1**(-2)*t1*u1)*Ar2*Nc**2*Cf*st**2*
     + Pi**2*alphas**2*prefac * (  - 64 + 128*s**(-2)*m1**2*t1 + 256*
     +    s**(-2)*m1**2*u1 + 128*s**(-2)*m1**4 + 128*s**(-2)*t1*u1 + 
     +    128*s**(-2)*u1**2 + 32*s**(-1)*m1**2*t1*u1**(-1) - 32*s**(-1)
     +    *m1**2 + 96*s**(-1)*m1**4*t1*u1**(-2) - 128*s**(-1)*m1**4*
     +    u1**(-1) + 96*s**(-1)*m1**6*u1**(-2) + 64*s**(-1)*t1 + 64*
     +    s**(-1)*u1 - 224*m1**2*u1**(-1) - 160*m1**4*u1**(-2) )
      MM_v = MM_v + SCB(3,1)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 64 + 288*s**(-1)*kaellen**(-1)*m1**2*t1*u1 + 48*s**(-1)*
     +    kaellen**(-1)*m1**2*t1**2 + 240*s**(-1)*kaellen**(-1)*m1**2*
     +    u1**2 + 128*s**(-1)*kaellen**(-1)*m1**4*t1 + 352*s**(-1)*
     +    kaellen**(-1)*m1**4*u1 - 32*s**(-1)*kaellen**(-1)*m1**6*t1*
     +    u1**(-1) + 128*s**(-1)*kaellen**(-1)*m1**6 + 96*s**(-1)*
     +    kaellen**(-1)*t1*u1**2 + 48*s**(-1)*kaellen**(-1)*t1**2*u1 + 
     +    48*s**(-1)*kaellen**(-1)*u1**3 + 32*s**(-1)*m1**2*t1*u1**(-1)
     +     + 16*s**(-1)*m1**2 + 64*s**(-1)*t1 - 16*s**(-1)*u1 + 672*
     +    kaellen**(-1)*m1**2*t1 + 96*kaellen**(-1)*m1**2*t1**2*
     +    u1**(-1) + 480*kaellen**(-1)*m1**2*u1 + 352*kaellen**(-1)*
     +    m1**4*t1*u1**(-1) + 704*kaellen**(-1)*m1**4 + 256*
     +    kaellen**(-1)*m1**6*u1**(-1) + 224*kaellen**(-1)*t1*u1 + 128*
     +    kaellen**(-1)*t1**2 + 96*kaellen**(-1)*u1**2 - 64*m1**2*
     +    u1**(-1) )
      MM_v = MM_v + SCB(3,1)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +     - 384*s**(-1)*kaellen**(-1)*m1**2*t1*u1 - 320*s**(-1)*
     +    kaellen**(-1)*m1**2*t1**2 - 64*s**(-1)*kaellen**(-1)*m1**2*
     +    u1**2 - 448*s**(-1)*kaellen**(-1)*m1**4*t1 - 224*s**(-1)*
     +    kaellen**(-1)*m1**4*u1 + 32*s**(-1)*kaellen**(-1)*m1**6*t1*
     +    u1**(-1) - 192*s**(-1)*kaellen**(-1)*m1**6 - 64*s**(-1)*
     +    kaellen**(-1)*t1*u1**2 - 128*s**(-1)*kaellen**(-1)*t1**2*u1
     +     - 64*s**(-1)*kaellen**(-1)*t1**3 - 32*s**(-1)*m1**2*t1*
     +    u1**(-1) - 32*s**(-1)*u1 - 672*kaellen**(-1)*m1**2*t1 - 352*
     +    kaellen**(-1)*m1**2*t1**2*u1**(-1) - 224*kaellen**(-1)*m1**2*
     +    u1 - 608*kaellen**(-1)*m1**4*t1*u1**(-1) - 448*kaellen**(-1)*
     +    m1**4 - 256*kaellen**(-1)*m1**6*u1**(-1) - 160*kaellen**(-1)*
     +    t1*u1 - 192*kaellen**(-1)*t1**2 - 64*kaellen**(-1)*t1**3*
     +    u1**(-1) - 32*kaellen**(-1)*u1**2 + 64*m1**2*u1**(-1) + 64*t1
     +    *u1**(-1) )
      MM_v = MM_v + SCB(3,2)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 128 + 48*s**(-1)*u**(-1)*m1**2*t1 + 16*s**(-1)*u**(-1)*
     +    m1**2*t1**2*u1**(-1) + 16*s**(-1)*u**(-1)*m1**2*u1 + 48*
     +    s**(-1)*u**(-1)*m1**4*t1*u1**(-1) + 16*s**(-1)*u**(-1)*m1**4
     +     + 16*s**(-1)*u**(-1)*t1**2 + 128*s**(-1)*m1**2*t1*u1**(-1)
     +     + 16*s**(-1)*m1**2*t1**2*u1**(-2) + 144*s**(-1)*m1**2 + 64*
     +    s**(-1)*m1**4*t1*u1**(-2) - 176*s**(-1)*m1**4*u1**(-1) - 208*
     +    s**(-1)*m1**6*u1**(-2) + 128*s**(-1)*t1 - 16*s**(-1)*t1**2*
     +    u1**(-1) + 128*s**(-1)*u1 + 16*u**(-1)*m1**2*t1*u1**(-1) - 32
     +    *u**(-1)*m1**2 - 96*u**(-1)*m1**4*u1**(-1) - 64*u**(-1)*m1**6
     +    *u1**(-2) + 16*u**(-1)*t1 + 16*m1**2*t1*u1**(-2) - 64*m1**2*
     +    u1**(-1) - 656*m1**4*u1**(-2) - 512*m1**6*u1**(-3) - 16*t1*
     +    u1**(-1) )
      MM_v = MM_v + SCB(3,2)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +     - 128 + 32*s**(-1)*u**(-1)*m1**2*u1 - 32*s**(-1)*u**(-1)*
     +    m1**4 - 64*s**(-1)*u**(-1)*m1**6*u1**(-1) - 224*s**(-1)*m1**2
     +    *t1*u1**(-1) - 32*s**(-1)*m1**2*t1**2*u1**(-2) - 224*s**(-1)*
     +    m1**2 - 128*s**(-1)*m1**4*t1*u1**(-2) + 160*s**(-1)*m1**4*
     +    u1**(-1) + 160*s**(-1)*m1**6*u1**(-2) - 128*s**(-1)*t1 - 128*
     +    s**(-1)*u1 - 32*m1**2*t1*u1**(-2) + 64*m1**2*u1**(-1) + 672*
     +    m1**4*u1**(-2) + 512*m1**6*u1**(-3) )
      MM_v = MM_v + SCB(3,2)*Cf*Pi*alphas*prefac * ( 32*m1**2*u1**(-1)*
     +    born_u + 16*born_u )
      MM_v = MM_v + SCB(3,4)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 96 - 288*s**(-1)*kaellen**(-1)*m1**2*t1*u1 - 48*s**(-1)*
     +    kaellen**(-1)*m1**2*t1**2 - 240*s**(-1)*kaellen**(-1)*m1**2*
     +    u1**2 - 32*s**(-1)*kaellen**(-1)*m1**4*t1 + 64*s**(-1)*
     +    kaellen**(-1)*m1**4*t1**2*u1**(-1) - 320*s**(-1)*
     +    kaellen**(-1)*m1**4*u1 + 96*s**(-1)*kaellen**(-1)*m1**6*t1*
     +    u1**(-1) - 96*s**(-1)*kaellen**(-1)*m1**6 - 96*s**(-1)*
     +    kaellen**(-1)*t1*u1**2 - 48*s**(-1)*kaellen**(-1)*t1**2*u1 - 
     +    48*s**(-1)*kaellen**(-1)*u1**3 + 368*s**(-1)*m1**2*t1*
     +    u1**(-1) + 400*s**(-1)*m1**2*t1**2*u1**(-2) - 240*s**(-1)*
     +    m1**2 + 480*s**(-1)*m1**4*t1*u1**(-2) + 304*s**(-1)*m1**4*
     +    u1**(-1) + 432*s**(-1)*m1**6*u1**(-2) - 64*s**(-1)*t1 + 192*
     +    s**(-1)*t1**2*u1**(-1) + 96*s**(-1)*t1**3*u1**(-2) - 144*
     +    s**(-1)*u1 - 544*kaellen**(-1)*m1**2*t1 - 288*kaellen**(-1)*
     +    m1**2*t1**2*u1**(-1) - 416*kaellen**(-1)*m1**2*u1 - 416*
     +    kaellen**(-1)*m1**4*t1*u1**(-1) )
      MM_v = MM_v + SCB(3,4)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 544*kaellen**(-1)*m1**4 - 256*kaellen**(-1)*m1**6*
     +    u1**(-1) - 160*kaellen**(-1)*t1*u1 - 128*kaellen**(-1)*t1**2
     +     - 64*kaellen**(-1)*t1**3*u1**(-1) - 96*kaellen**(-1)*u1**2
     +     + 304*m1**2*t1*u1**(-2) + 560*m1**4*u1**(-2) + 512*m1**6*
     +    u1**(-3) + 160*t1*u1**(-1) + 96*t1**2*u1**(-2) )
      MM_v = MM_v + SCB(3,4)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +    160 + 384*s**(-1)*kaellen**(-1)*m1**2*t1*u1 + 320*s**(-1)*
     +    kaellen**(-1)*m1**2*t1**2 + 64*s**(-1)*kaellen**(-1)*m1**2*
     +    u1**2 + 352*s**(-1)*kaellen**(-1)*m1**4*t1 - 64*s**(-1)*
     +    kaellen**(-1)*m1**4*t1**2*u1**(-1) + 192*s**(-1)*
     +    kaellen**(-1)*m1**4*u1 - 96*s**(-1)*kaellen**(-1)*m1**6*t1*
     +    u1**(-1) + 160*s**(-1)*kaellen**(-1)*m1**6 + 64*s**(-1)*
     +    kaellen**(-1)*t1*u1**2 + 128*s**(-1)*kaellen**(-1)*t1**2*u1
     +     + 64*s**(-1)*kaellen**(-1)*t1**3 + 192*s**(-1)*m1**2*
     +    t1**(-2)*u1**2 - 320*s**(-1)*m1**2*t1*u1**(-1) - 288*s**(-1)*
     +    m1**2*t1**2*u1**(-2) + 160*s**(-1)*m1**2 + 192*s**(-1)*m1**4*
     +    t1**(-2)*u1 - 320*s**(-1)*m1**4*t1*u1**(-2) - 224*s**(-1)*
     +    m1**4*u1**(-1) + 64*s**(-1)*m1**6*t1**(-2) - 352*s**(-1)*
     +    m1**6*u1**(-2) + 64*s**(-1)*t1**(-2)*u1**3 - 32*s**(-1)*t1 - 
     +    192*s**(-1)*t1**2*u1**(-1) - 64*s**(-1)*t1**3*u1**(-2) + 128*
     +    s**(-1)*u1 )
      MM_v = MM_v + SCB(3,4)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +    544*kaellen**(-1)*m1**2*t1 + 544*kaellen**(-1)*m1**2*t1**2*
     +    u1**(-1) + 160*kaellen**(-1)*m1**2*u1 + 672*kaellen**(-1)*
     +    m1**4*t1*u1**(-1) + 288*kaellen**(-1)*m1**4 + 256*
     +    kaellen**(-1)*m1**6*u1**(-1) + 96*kaellen**(-1)*t1*u1 + 192*
     +    kaellen**(-1)*t1**2 + 128*kaellen**(-1)*t1**3*u1**(-1) + 32*
     +    kaellen**(-1)*u1**2 + 128*m1**2*t1**(-2)*u1 - 64*m1**2*
     +    t1**(-1) - 224*m1**2*t1*u1**(-2) + 64*m1**4*t1**(-2) - 480*
     +    m1**4*u1**(-2) - 512*m1**6*u1**(-3) + 64*t1**(-2)*u1**2 - 64*
     +    t1**(-1)*u1 - 256*t1*u1**(-1) - 64*t1**2*u1**(-2) )
      MM_v = MM_v + SCB(3,4)*Cf*Pi*alphas*prefac * (  - 32*m1**2*
     +    u1**(-1)*born_u + 8*born_s + 8*born_u )
      MM_v = MM_v + SCB(5,1)*susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*
     + prefac * (  - 32 - 32*s**(-2)*m1**2*mg**2*t1*u1**(-1) + 96*
     +    s**(-2)*m1**2*mg**2 + 32*s**(-2)*m1**2*msx**2*t1*u1**(-1) - 
     +    96*s**(-2)*m1**2*msx**2 + 32*s**(-2)*mg**2*t1**2*u1**(-1) + 
     +    32*s**(-2)*mg**2*u1 - 32*s**(-2)*msx**2*t1**2*u1**(-1) - 32*
     +    s**(-2)*msx**2*u1 + 32*s**(-1)*m1**2*mg**2*u1**(-1) - 32*
     +    s**(-1)*m1**2*msx**2*u1**(-1) - 96*s**(-1)*m1**2*t1*u1**(-1)
     +     - 96*s**(-1)*m1**2 - 128*s**(-1)*t1 - 32*s**(-1)*t1**2*
     +    u1**(-1) - 32*s**(-1)*u1 - 64*m1**2*u1**(-1) - 32*mg**2*
     +    u1**(-1) + 32*msx**2*u1**(-1) - 32*t1*u1**(-1) )
      MM_v = MM_v + SCB(5,1)*susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 32 + 32*s**(-2)*m1**2*mg**2*t1*u1**(-1) - 96*s**(-2)*m1**2*
     +    mg**2 - 32*s**(-2)*m1**2*msx**2*t1*u1**(-1) + 96*s**(-2)*
     +    m1**2*msx**2 - 32*s**(-2)*mg**2*t1**2*u1**(-1) - 32*s**(-2)*
     +    mg**2*u1 + 32*s**(-2)*msx**2*t1**2*u1**(-1) + 32*s**(-2)*
     +    msx**2*u1 - 32*s**(-1)*m1**2*mg**2*u1**(-1) + 32*s**(-1)*
     +    m1**2*msx**2*u1**(-1) + 96*s**(-1)*m1**2*t1*u1**(-1) + 96*
     +    s**(-1)*m1**2 + 128*s**(-1)*t1 + 32*s**(-1)*t1**2*u1**(-1) + 
     +    32*s**(-1)*u1 + 64*m1**2*u1**(-1) + 32*mg**2*u1**(-1) - 32*
     +    msx**2*u1**(-1) + 32*t1*u1**(-1) )
      MM_v = MM_v + SCB(5,1)*susy*Cf*Pi*alphas*prefac * (  - 8*s**(-1)*
     +    mg**2*born_s + 8*s**(-1)*msx**2*born_s - 8*born_s )
      MM_v = MM_v + SCB(5,2)*susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*
     + prefac * (  - 64 - 64*s**(-1)*u**(-1)*m1**2*mg**2 + 64*s**(-1)*
     +    u**(-1)*m1**2*mt**2 + 64*s**(-1)*u**(-1)*m1**2*u1 - 64*
     +    s**(-1)*u**(-1)*m1**4*mg**2*u1**(-1) + 64*s**(-1)*u**(-1)*
     +    m1**4*mt**2*u1**(-1) - 64*s**(-1)*u**(-1)*m1**6*u1**(-1) + 
     +    192*s**(-1)*m1**2*mg**2*t1*u1**(-2) + 128*s**(-1)*m1**2*mg**2
     +    *u1**(-1) + 192*s**(-1)*m1**2*mt**2*t1*u1**(-2) - 320*s**(-1)
     +    *m1**2*t1*u1**(-1) - 64*s**(-1)*m1**2*t1**2*u1**(-2) - 192*
     +    s**(-1)*m1**2 - 192*s**(-1)*m1**4*t1*u1**(-2) + 128*s**(-1)*
     +    mg**2*t1*u1**(-1) + 64*s**(-1)*mg**2*t1**2*u1**(-2) + 64*
     +    s**(-1)*mg**2 + 128*s**(-1)*mt**2*t1*u1**(-1) + 64*s**(-1)*
     +    mt**2*t1**2*u1**(-2) + 64*s**(-1)*mt**2 - 128*s**(-1)*t1 - 64
     +    *s**(-1)*t1**2*u1**(-1) - 64*s**(-1)*u1 - 128*m1**2*mg**2*
     +    u1**(-2) - 128*m1**2*mt**2*u1**(-2) - 64*m1**2*t1*u1**(-2) + 
     +    64*m1**2*u1**(-1) - 256*m1**4*mg**2*u1**(-3) - 256*m1**4*
     +    mt**2*u1**(-3) )
      MM_v = MM_v + SCB(5,2)*susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*
     + prefac * ( 384*m1**4*u1**(-2) + 256*m1**6*u1**(-3) + 64*mg**2*t1
     +    *u1**(-2) + 64*mg**2*u1**(-1) + 64*mt**2*t1*u1**(-2) + 64*
     +    mt**2*u1**(-1) - 64*t1*u1**(-1) )
      MM_v = MM_v + SCB(5,2)*susy*Ar2*Nc**2*Cf*Pi**2*alphas**2*prefac
     +  * ( 192*s**(-1)*s2t*c2t*m1**2*mg*mt*t1*u1**(-2) + 64*s**(-1)*
     +    s2t*c2t*m1**2*mg*mt*u1**(-1) + 128*s**(-1)*s2t*c2t*mg*mt*t1*
     +    u1**(-1) + 64*s**(-1)*s2t*c2t*mg*mt*t1**2*u1**(-2) + 64*
     +    s**(-1)*s2t*c2t*mg*mt - 192*s**(-1)*s2t*m1**2*mg*mt*t1*
     +    u1**(-2) - 64*s**(-1)*s2t*m1**2*mg*mt*u1**(-1) - 128*s**(-1)*
     +    s2t*mg*mt*t1*u1**(-1) - 64*s**(-1)*s2t*mg*mt*t1**2*u1**(-2)
     +     - 64*s**(-1)*s2t*mg*mt - 128*s2t*c2t*m1**2*mg*mt*u1**(-2) - 
     +    256*s2t*c2t*m1**4*mg*mt*u1**(-3) + 64*s2t*c2t*mg*mt*t1*
     +    u1**(-2) + 64*s2t*c2t*mg*mt*u1**(-1) + 128*s2t*m1**2*mg*mt*
     +    u1**(-2) + 256*s2t*m1**4*mg*mt*u1**(-3) - 64*s2t*mg*mt*t1*
     +    u1**(-2) - 64*s2t*mg*mt*u1**(-1) )
      MM_v = MM_v + SCB(5,2)*susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 64 - 64*s**(-1)*u**(-1)*m1**2*mg**2 + 64*s**(-1)*u**(-1)*
     +    m1**2*mt**2 - 64*s**(-1)*u**(-1)*m1**2*u1 - 64*s**(-1)*
     +    u**(-1)*m1**4*mg**2*u1**(-1) + 64*s**(-1)*u**(-1)*m1**4*mt**2
     +    *u1**(-1) + 64*s**(-1)*u**(-1)*m1**6*u1**(-1) - 192*s**(-1)*
     +    m1**2*mg**2*t1*u1**(-2) - 192*s**(-1)*m1**2*mt**2*t1*u1**(-2)
     +     - 128*s**(-1)*m1**2*mt**2*u1**(-1) + 320*s**(-1)*m1**2*t1*
     +    u1**(-1) + 64*s**(-1)*m1**2*t1**2*u1**(-2) + 192*s**(-1)*
     +    m1**2 + 192*s**(-1)*m1**4*t1*u1**(-2) - 128*s**(-1)*mg**2*t1*
     +    u1**(-1) - 64*s**(-1)*mg**2*t1**2*u1**(-2) - 64*s**(-1)*mg**2
     +     - 128*s**(-1)*mt**2*t1*u1**(-1) - 64*s**(-1)*mt**2*t1**2*
     +    u1**(-2) - 64*s**(-1)*mt**2 + 128*s**(-1)*t1 + 64*s**(-1)*
     +    t1**2*u1**(-1) + 64*s**(-1)*u1 + 128*m1**2*mg**2*u1**(-2) + 
     +    128*m1**2*mt**2*u1**(-2) + 64*m1**2*t1*u1**(-2) - 64*m1**2*
     +    u1**(-1) + 256*m1**4*mg**2*u1**(-3) + 256*m1**4*mt**2*
     +    u1**(-3) )
      MM_v = MM_v + SCB(5,2)*susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 384*m1**4*u1**(-2) - 256*m1**6*u1**(-3) - 64*mg**2*t1*
     +    u1**(-2) - 64*mg**2*u1**(-1) - 64*mt**2*t1*u1**(-2) - 64*
     +    mt**2*u1**(-1) + 64*t1*u1**(-1) )
      MM_v = MM_v + SCB(5,2)*susy*Ar2*Cf*Pi**2*alphas**2*prefac * (  - 
     +    192*s**(-1)*s2t*c2t*m1**2*mg*mt*t1*u1**(-2) - 64*s**(-1)*s2t*
     +    c2t*m1**2*mg*mt*u1**(-1) - 128*s**(-1)*s2t*c2t*mg*mt*t1*
     +    u1**(-1) - 64*s**(-1)*s2t*c2t*mg*mt*t1**2*u1**(-2) - 64*
     +    s**(-1)*s2t*c2t*mg*mt + 192*s**(-1)*s2t*m1**2*mg*mt*t1*
     +    u1**(-2) + 64*s**(-1)*s2t*m1**2*mg*mt*u1**(-1) + 128*s**(-1)*
     +    s2t*mg*mt*t1*u1**(-1) + 64*s**(-1)*s2t*mg*mt*t1**2*u1**(-2)
     +     + 64*s**(-1)*s2t*mg*mt + 128*s2t*c2t*m1**2*mg*mt*u1**(-2) + 
     +    256*s2t*c2t*m1**4*mg*mt*u1**(-3) - 64*s2t*c2t*mg*mt*t1*
     +    u1**(-2) - 64*s2t*c2t*mg*mt*u1**(-1) - 128*s2t*m1**2*mg*mt*
     +    u1**(-2) - 256*s2t*m1**4*mg*mt*u1**(-3) + 64*s2t*mg*mt*t1*
     +    u1**(-2) + 64*s2t*mg*mt*u1**(-1) )
      MM_v = MM_v + SCB(5,2)*susy*Cf*Pi*alphas*prefac * (  - 32*s2t*mg*
     +    mt*u1**(-1)*born_u - 16*m1**2*u1**(-1)*born_u + 16*mg**2*
     +    u1**(-1)*born_u + 16*mt**2*u1**(-1)*born_u - 16*born_u
     +     )
      MM_v = MM_v + SCB(5,3)*susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*
     + prefac * (  - 192*s**(-1)*m1**2*mg**2*t1*u1**(-2) - 64*s**(-1)*
     +    m1**2*mg**2*u1**(-1) - 192*s**(-1)*m1**2*mt**2*t1*u1**(-2) - 
     +    64*s**(-1)*m1**2*mt**2*u1**(-1) + 128*s**(-1)*m1**2*t1*
     +    u1**(-1) + 64*s**(-1)*m1**2*t1**2*u1**(-2) + 64*s**(-1)*m1**2
     +     + 192*s**(-1)*m1**4*t1*u1**(-2) + 64*s**(-1)*m1**4*u1**(-1)
     +     - 128*s**(-1)*mg**2*t1*u1**(-1) - 64*s**(-1)*mg**2*t1**2*
     +    u1**(-2) - 64*s**(-1)*mg**2 - 128*s**(-1)*mt**2*t1*u1**(-1)
     +     - 64*s**(-1)*mt**2*t1**2*u1**(-2) - 64*s**(-1)*mt**2 + 128*
     +    m1**2*mg**2*u1**(-2) + 128*m1**2*mt**2*u1**(-2) + 64*m1**2*t1
     +    *u1**(-2) + 64*m1**2*u1**(-1) + 256*m1**4*mg**2*u1**(-3) + 
     +    256*m1**4*mt**2*u1**(-3) - 128*m1**4*u1**(-2) - 256*m1**6*
     +    u1**(-3) - 64*mg**2*t1*u1**(-2) - 64*mg**2*u1**(-1) - 64*
     +    mt**2*t1*u1**(-2) - 64*mt**2*u1**(-1) )
      MM_v = MM_v + SCB(5,3)*susy*Ar2*Nc**2*Cf*Pi**2*alphas**2*prefac
     +  * (  - 192*s**(-1)*s2t*c2t*m1**2*mg*mt*t1*u1**(-2) - 64*s**(-1)
     +    *s2t*c2t*m1**2*mg*mt*u1**(-1) - 128*s**(-1)*s2t*c2t*mg*mt*t1*
     +    u1**(-1) - 64*s**(-1)*s2t*c2t*mg*mt*t1**2*u1**(-2) - 64*
     +    s**(-1)*s2t*c2t*mg*mt + 192*s**(-1)*s2t*m1**2*mg*mt*t1*
     +    u1**(-2) + 64*s**(-1)*s2t*m1**2*mg*mt*u1**(-1) + 128*s**(-1)*
     +    s2t*mg*mt*t1*u1**(-1) + 64*s**(-1)*s2t*mg*mt*t1**2*u1**(-2)
     +     + 64*s**(-1)*s2t*mg*mt + 128*s2t*c2t*m1**2*mg*mt*u1**(-2) + 
     +    256*s2t*c2t*m1**4*mg*mt*u1**(-3) - 64*s2t*c2t*mg*mt*t1*
     +    u1**(-2) - 64*s2t*c2t*mg*mt*u1**(-1) - 128*s2t*m1**2*mg*mt*
     +    u1**(-2) - 256*s2t*m1**4*mg*mt*u1**(-3) + 64*s2t*mg*mt*t1*
     +    u1**(-2) + 64*s2t*mg*mt*u1**(-1) )
      MM_v = MM_v + SCB(5,3)*susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 192*s**(-1)*m1**2*mg**2*t1*u1**(-2) + 64*s**(-1)*m1**2*
     +    mg**2*u1**(-1) + 192*s**(-1)*m1**2*mt**2*t1*u1**(-2) + 64*
     +    s**(-1)*m1**2*mt**2*u1**(-1) - 128*s**(-1)*m1**2*t1*u1**(-1)
     +     - 64*s**(-1)*m1**2*t1**2*u1**(-2) - 64*s**(-1)*m1**2 - 192*
     +    s**(-1)*m1**4*t1*u1**(-2) - 64*s**(-1)*m1**4*u1**(-1) + 128*
     +    s**(-1)*mg**2*t1*u1**(-1) + 64*s**(-1)*mg**2*t1**2*u1**(-2)
     +     + 64*s**(-1)*mg**2 + 128*s**(-1)*mt**2*t1*u1**(-1) + 64*
     +    s**(-1)*mt**2*t1**2*u1**(-2) + 64*s**(-1)*mt**2 - 128*m1**2*
     +    mg**2*u1**(-2) - 128*m1**2*mt**2*u1**(-2) - 64*m1**2*t1*
     +    u1**(-2) - 64*m1**2*u1**(-1) - 256*m1**4*mg**2*u1**(-3) - 256
     +    *m1**4*mt**2*u1**(-3) + 128*m1**4*u1**(-2) + 256*m1**6*
     +    u1**(-3) + 64*mg**2*t1*u1**(-2) + 64*mg**2*u1**(-1) + 64*
     +    mt**2*t1*u1**(-2) + 64*mt**2*u1**(-1) )
      MM_v = MM_v + SCB(5,3)*susy*Ar2*Cf*Pi**2*alphas**2*prefac * ( 192
     +    *s**(-1)*s2t*c2t*m1**2*mg*mt*t1*u1**(-2) + 64*s**(-1)*s2t*c2t
     +    *m1**2*mg*mt*u1**(-1) + 128*s**(-1)*s2t*c2t*mg*mt*t1*u1**(-1)
     +     + 64*s**(-1)*s2t*c2t*mg*mt*t1**2*u1**(-2) + 64*s**(-1)*s2t*
     +    c2t*mg*mt - 192*s**(-1)*s2t*m1**2*mg*mt*t1*u1**(-2) - 64*
     +    s**(-1)*s2t*m1**2*mg*mt*u1**(-1) - 128*s**(-1)*s2t*mg*mt*t1*
     +    u1**(-1) - 64*s**(-1)*s2t*mg*mt*t1**2*u1**(-2) - 64*s**(-1)*
     +    s2t*mg*mt - 128*s2t*c2t*m1**2*mg*mt*u1**(-2) - 256*s2t*c2t*
     +    m1**4*mg*mt*u1**(-3) + 64*s2t*c2t*mg*mt*t1*u1**(-2) + 64*s2t*
     +    c2t*mg*mt*u1**(-1) + 128*s2t*m1**2*mg*mt*u1**(-2) + 256*s2t*
     +    m1**4*mg*mt*u1**(-3) - 64*s2t*mg*mt*t1*u1**(-2) - 64*s2t*mg*
     +    mt*u1**(-1) )
      MM_v = MM_v + SCB(5,3)*susy*Cf*Pi*alphas*prefac * ( 32*s2t*mg*mt*
     +    u1**(-1)*born_u + 16*m1**2*u1**(-1)*born_u - 16*mg**2*
     +    u1**(-1)*born_u - 16*mt**2*u1**(-1)*born_u - 8*born_s
     +     - 8*born_u )
      MM_v = MM_v + SCB(6,1)*susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*
     + prefac * ( 192*s**(-2)*m1**2*mg**2*t1*u1**(-1) - 160*s**(-2)*
     +    m1**2*mg**2 - 192*s**(-2)*m1**2*msx**2*t1*u1**(-1) + 160*
     +    s**(-2)*m1**2*msx**2 + 32*s**(-2)*mg**2*t1 + 32*s**(-2)*mg**2
     +    *t1**2*u1**(-1) - 32*s**(-2)*mg**2*u1 - 32*s**(-2)*msx**2*t1
     +     - 32*s**(-2)*msx**2*t1**2*u1**(-1) + 32*s**(-2)*msx**2*u1 - 
     +    32*s**(-1)*m1**2*mg**2*u1**(-1) + 32*s**(-1)*m1**2*msx**2*
     +    u1**(-1) + 32*mg**2*u1**(-1) - 32*msx**2*u1**(-1) )
      MM_v = MM_v + SCB(6,1)*susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 192*s**(-2)*m1**2*mg**2*t1*u1**(-1) + 160*s**(-2)*m1**2*
     +    mg**2 + 192*s**(-2)*m1**2*msx**2*t1*u1**(-1) - 160*s**(-2)*
     +    m1**2*msx**2 - 32*s**(-2)*mg**2*t1 - 32*s**(-2)*mg**2*t1**2*
     +    u1**(-1) + 32*s**(-2)*mg**2*u1 + 32*s**(-2)*msx**2*t1 + 32*
     +    s**(-2)*msx**2*t1**2*u1**(-1) - 32*s**(-2)*msx**2*u1 + 32*
     +    s**(-1)*m1**2*mg**2*u1**(-1) - 32*s**(-1)*m1**2*msx**2*
     +    u1**(-1) - 32*mg**2*u1**(-1) + 32*msx**2*u1**(-1) )
      MM_v = MM_v + SCB(6,1)*susy*Cf*Pi*alphas*prefac * (  - 4*born_s
     +     - 4*born_u )
      MM_v = MM_v + SCB(6,2)*susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*
     + prefac * (  - 64*s**(-1)*u**(-1)*m1**2*mt**2 - 64*s**(-1)*
     +    u**(-1)*m1**4*mt**2*u1**(-1) + 64*s**(-1)*m1**2*mt**2*
     +    u1**(-1) )
      MM_v = MM_v + SCB(6,2)*susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 64*s**(-1)*u**(-1)*m1**2*mt**2 - 64*s**(-1)*u**(-1)*
     +    m1**4*mt**2*u1**(-1) + 64*s**(-1)*m1**2*mt**2*u1**(-1) )
      MM_v = MM_v + SCB(6,2)*Pi*alphas*prefac * (  - 8./3.*born_s - 8.
     +    /3.*born_u )
      MM_v = MM_v + SCB(6,3)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 32*s**(-1)*u**(-1)*m1**4 - 32*s**(-1)*u**(-1)*m1**6*
     +    u1**(-1) + 32*s**(-1)*m1**4*u1**(-1) )
      MM_v = MM_v + SCB(6,3)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +     - 128 + 32*s**(-1)*u**(-1)*m1**4 + 32*s**(-1)*u**(-1)*m1**6*
     +    u1**(-1) + 256*s**(-1)*m1**2*t1*u1**(-1) + 320*s**(-1)*m1**2*
     +    t1**2*u1**(-2) - 192*s**(-1)*m1**2 + 448*s**(-1)*m1**4*t1*
     +    u1**(-2) + 96*s**(-1)*m1**4*u1**(-1) + 192*s**(-1)*m1**6*
     +    u1**(-2) - 64*s**(-1)*t1 + 128*s**(-1)*t1**2*u1**(-1) + 64*
     +    s**(-1)*t1**3*u1**(-2) - 128*s**(-1)*u1 + 256*m1**2*t1*
     +    u1**(-2) - 64*m1**2*u1**(-1) + 192*m1**4*u1**(-2) + 64*t1*
     +    u1**(-1) + 64*t1**2*u1**(-2) )
      MM_v = MM_v + SCB(6,3)*Pi*alphas*prefac * (  - 2./3.*born_s - 2.
     +    /3.*born_u )
      MM_v = MM_v + SCB(6,4)*susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*
     + prefac * (  - 160*s**(-2)*m1**2*mg**2*t1*u1**(-1) + 64*s**(-2)*
     +    m1**2*mg**2 - 32*s**(-2)*mg**2*t1 - 64*s**(-2)*mg**2*t1**2*
     +    u1**(-1) + 64*s**(-1)*u**(-1)*m1**2*mg**2 + 64*s**(-1)*
     +    u**(-1)*m1**4*mg**2*u1**(-1) - 64*s**(-1)*m1**2*mg**2*
     +    u1**(-1) )
      MM_v = MM_v + SCB(6,4)*susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 160*s**(-2)*m1**2*mg**2*t1*u1**(-1) - 64*s**(-2)*m1**2*
     +    mg**2 + 32*s**(-2)*mg**2*t1 + 64*s**(-2)*mg**2*t1**2*u1**(-1)
     +     + 64*s**(-1)*u**(-1)*m1**2*mg**2 + 64*s**(-1)*u**(-1)*m1**4*
     +    mg**2*u1**(-1) - 64*s**(-1)*m1**2*mg**2*u1**(-1) )
      MM_v = MM_v + SCB(6,4)*susy*Nc*Pi*alphas*prefac * (  - 8./3.*
     +    born_s - 8./3.*born_u )
      MM_v = MM_v + SCB(6,4)*susy*Cf*Pi*alphas*prefac * ( 8*s**(-1)*
     +    mg**2*born_s )
      MM_v = MM_v + SCB(6,5)*susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*
     + prefac * ( 160*s**(-2)*m1**2*msx**2*t1*u1**(-1) - 64*s**(-2)*
     +    m1**2*msx**2 + 32*s**(-2)*msx**2*t1 + 64*s**(-2)*msx**2*t1**2
     +    *u1**(-1) )
      MM_v = MM_v + SCB(6,5)*susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 160*s**(-2)*m1**2*msx**2*t1*u1**(-1) + 64*s**(-2)*m1**2*
     +    msx**2 - 32*s**(-2)*msx**2*t1 - 64*s**(-2)*msx**2*t1**2*
     +    u1**(-1) )
      MM_v = MM_v + SCB(6,5)*susy*Cf*Pi*alphas*prefac * (  - 8*s**(-1)*
     +    msx**2*born_s )
      MM_v = MM_v + SCB(6,5)*susy*Pi*alphas*prefac * (  - 4./3.*(Ns-1)*
     +    born_s - 4./3.*(Ns-1)*born_u )
      MM_v = MM_v + SCB(6,6)*susy2*Pi*alphas*prefac * (  - 2./3.*
     +    born_s - 2./3.*born_u )
      MM_v = MM_v + SCB(7,1)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 32 - 96*s**(-1)*kaellen**(-1)*m1**4*t1 - 64*s**(-1)*
     +    kaellen**(-1)*m1**4*t1**2*u1**(-1) - 32*s**(-1)*kaellen**(-1)
     +    *m1**4*u1 - 64*s**(-1)*kaellen**(-1)*m1**6*t1*u1**(-1) - 32*
     +    s**(-1)*kaellen**(-1)*m1**6 - 64*s**(-1)*m1**2*t1*u1**(-1) - 
     +    32*s**(-1)*m1**2 - 32*s**(-1)*t1 + 32*s**(-1)*u1 - 128*
     +    kaellen**(-1)*m1**2*t1 + 192*kaellen**(-1)*m1**2*t1**2*
     +    u1**(-1) - 64*kaellen**(-1)*m1**2*u1 + 64*kaellen**(-1)*m1**4
     +    *t1*u1**(-1) - 160*kaellen**(-1)*m1**4 - 64*kaellen**(-1)*t1*
     +    u1 + 64*kaellen**(-1)*t1**3*u1**(-1) - 128*m1**2*u1**(-1) - 
     +    64*t1*u1**(-1) )
      MM_v = MM_v + SCB(7,1)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 96
     +    *s**(-1)*kaellen**(-1)*m1**4*t1 + 64*s**(-1)*kaellen**(-1)*
     +    m1**4*t1**2*u1**(-1) + 32*s**(-1)*kaellen**(-1)*m1**4*u1 + 64
     +    *s**(-1)*kaellen**(-1)*m1**6*t1*u1**(-1) + 32*s**(-1)*
     +    kaellen**(-1)*m1**6 + 32*s**(-1)*m1**2*t1*u1**(-1) + 64*
     +    s**(-1)*m1**2 + 32*s**(-1)*t1 - 32*s**(-1)*t1**2*u1**(-1) + 
     +    128*kaellen**(-1)*m1**2*t1 - 192*kaellen**(-1)*m1**2*t1**2*
     +    u1**(-1) + 64*kaellen**(-1)*m1**2*u1 - 64*kaellen**(-1)*m1**4
     +    *t1*u1**(-1) + 160*kaellen**(-1)*m1**4 + 64*kaellen**(-1)*t1*
     +    u1 - 64*kaellen**(-1)*t1**3*u1**(-1) + 128*m1**2*u1**(-1) + 
     +    32*t1*u1**(-1) )
      MM_v = MM_v + SCB(7,1)*Cf*Pi*alphas*prefac * (  - 8*born_s )
      MM_v = MM_v + SCBP(1)*susy*Cf*Pi*alphas*prefac * (  - 4*mg**2*
     +    born_s - 4*mg**2*born_u + 4*msx**2*born_s + 4*msx**2*
     +    born_u )
      MM_v = MM_v + SCBP(5)*Cf*Pi*alphas*prefac * ( 16*m1**2*born_s
     +     + 16*m1**2*born_u )
      MM_v = MM_v + SCBP(6)*susy*Cf*Pi*alphas*prefac * (  - 16*s2t*mg*
     +    mt*born_s - 16*s2t*mg*mt*born_u - 8*m1**2*born_s - 8*
     +    m1**2*born_u + 8*mg**2*born_s + 8*mg**2*born_u + 8*
     +    mt**2*born_s + 8*mt**2*born_u )
      MM_v = MM_v + SCC(2,1)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +    256*s**(-1)*m1**2*t1**(-2)*u1**3 + 192*s**(-1)*m1**2*t1**(-1)
     +    *u1**2 - 64*s**(-1)*m1**2*t1 - 128*s**(-1)*m1**2*u1 + 384*
     +    s**(-1)*m1**4*t1**(-2)*u1**2 + 192*s**(-1)*m1**4*t1**(-1)*u1
     +     - 64*s**(-1)*m1**4 + 256*s**(-1)*m1**6*t1**(-2)*u1 + 64*
     +    s**(-1)*m1**6*t1**(-1) + 64*s**(-1)*m1**8*t1**(-2) + 64*
     +    s**(-1)*t1**(-2)*u1**4 + 64*s**(-1)*t1**(-1)*u1**3 - 64*
     +    s**(-1)*t1*u1 - 64*s**(-1)*u1**2 + 192*m1**2*t1**(-2)*u1**2
     +     + 64*m1**2*t1*u1**(-1) - 64*m1**2 + 192*m1**4*t1**(-2)*u1 + 
     +    64*m1**6*t1**(-2) + 64*t1**(-2)*u1**3 + 64*t1**2*u1**(-1) - 
     +    64*u1 )
      MM_v = MM_v + SCC(2,2)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 64
     +    *s**(-1)*m1**2*u1 + 128*s**(-1)*m1**4 - 64*s**(-1)*t1*u1 + 64
     +    *m1**2 + 64*m1**4*u1**(-1) - 64*t1 + 64*t1**2*u1**(-1) )
      MM_v = MM_v + SCC(2,3)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 160*s**(-1)*m1**2*t1 + 800*s**(-1)*m1**2*t1**2*u1**(-1) + 
     +    512*s**(-1)*m1**2*t1**3*u1**(-2) - 160*s**(-1)*m1**2*u1 + 928
     +    *s**(-1)*m1**4*t1*u1**(-1) + 960*s**(-1)*m1**4*t1**2*u1**(-2)
     +     - 64*s**(-1)*m1**4 + 768*s**(-1)*m1**6*t1*u1**(-2) + 352*
     +    s**(-1)*m1**6*u1**(-1) + 224*s**(-1)*m1**8*u1**(-2) + 96*
     +    s**(-1)*t1**2 + 224*s**(-1)*t1**3*u1**(-1) + 96*s**(-1)*t1**4
     +    *u1**(-2) - 32*s**(-1)*u1**2 + 256*m1**2*t1*u1**(-1) + 416*
     +    m1**2*t1**2*u1**(-2) - 192*m1**2 + 544*m1**4*t1*u1**(-2) + 
     +    128*m1**4*u1**(-1) + 224*m1**6*u1**(-2) - 32*t1 + 128*t1**2*
     +    u1**(-1) + 96*t1**3*u1**(-2) - 32*u1 )
      MM_v = MM_v + SCC(2,4)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 96*s**(-1)*m1**2*t1 - 64*s**(-1)*m1**2*t1**2*u1**(-1) + 
     +    192*s**(-1)*m1**2*u1 - 192*s**(-1)*m1**4*t1*u1**(-1) + 96*
     +    s**(-1)*m1**4 + 32*s**(-1)*t1*u1 + 96*s**(-1)*u1**2 - 64*
     +    m1**2*t1*u1**(-1) + 160*m1**2 + 256*m1**4*u1**(-1) + 256*
     +    m1**6*u1**(-2) + 96*u1 )
      MM_v = MM_v + SCC(2,4)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +    128*s**(-1)*m1**2*t1 + 64*s**(-1)*m1**2*t1**2*u1**(-1) - 128*
     +    s**(-1)*m1**2*u1 + 192*s**(-1)*m1**4*t1*u1**(-1) - 64*s**(-1)
     +    *m1**4 - 64*s**(-1)*u1**2 + 64*m1**2*t1*u1**(-1) - 128*m1**2
     +     - 256*m1**4*u1**(-1) - 256*m1**6*u1**(-2) - 64*u1 )
      MM_v = MM_v + SCC(4,1)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 128*m1**2*t1*u1**(-1) + 64*m1**2 + 64*t1 )
      MM_v = MM_v + SCC(4,1)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +     - 64*m1**4*u1**(-1) - 64*t1**2*u1**(-1) )
      MM_v = MM_v + SCC(5,1)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 96*s**(-1)*kaellen**(-1)*m1**6*t1 - 64*s**(-1)*
     +    kaellen**(-1)*m1**6*t1**2*u1**(-1) - 32*s**(-1)*kaellen**(-1)
     +    *m1**6*u1 - 64*s**(-1)*kaellen**(-1)*m1**8*t1*u1**(-1) - 32*
     +    s**(-1)*kaellen**(-1)*m1**8 - 256*s**(-1)*m1**2*t1 - 256*
     +    s**(-1)*m1**2*u1 - 128*s**(-1)*m1**4*t1*u1**(-1) - 224*
     +    s**(-1)*m1**4 - 128*s**(-1)*t1*u1 - 32*s**(-1)*t1**2 - 96*
     +    s**(-1)*u1**2 + 96*kaellen**(-1)*m1**2*t1*u1 - 112*
     +    kaellen**(-1)*m1**2*t1**2 - 128*kaellen**(-1)*m1**2*t1**3*
     +    u1**(-1) + 80*kaellen**(-1)*m1**2*u1**2 - 320*kaellen**(-1)*
     +    m1**4*t1 - 256*kaellen**(-1)*m1**4*t1**2*u1**(-1) - 448*
     +    kaellen**(-1)*m1**6*t1*u1**(-1) - 352*kaellen**(-1)*m1**6 - 
     +    256*kaellen**(-1)*m1**8*u1**(-1) + 64*kaellen**(-1)*t1*u1**2
     +     + 48*kaellen**(-1)*t1**2*u1 - 32*kaellen**(-1)*t1**3 - 32*
     +    kaellen**(-1)*t1**4*u1**(-1) + 16*kaellen**(-1)*u1**3 - 128*
     +    m1**2*t1*u1**(-1) )
      MM_v = MM_v + SCC(5,1)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * (  - 240*m1**2 - 256*m1**4*u1**(-1) - 128*t1 + 32*t1**2*
     +    u1**(-1) - 112*u1 )
      MM_v = MM_v + SCC(5,1)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 96
     +    *s**(-1)*kaellen**(-1)*m1**6*t1 + 64*s**(-1)*kaellen**(-1)*
     +    m1**6*t1**2*u1**(-1) + 32*s**(-1)*kaellen**(-1)*m1**6*u1 + 64
     +    *s**(-1)*kaellen**(-1)*m1**8*t1*u1**(-1) + 32*s**(-1)*
     +    kaellen**(-1)*m1**8 + 160*s**(-1)*m1**2*t1 + 160*s**(-1)*
     +    m1**2*u1 + 128*s**(-1)*m1**4*t1*u1**(-1) + 160*s**(-1)*m1**4
     +     + 64*s**(-1)*t1*u1 + 64*s**(-1)*u1**2 - 512*kaellen**(-1)*
     +    m1**2*t1*u1 + 160*kaellen**(-1)*m1**2*t1**2 + 448*
     +    kaellen**(-1)*m1**2*t1**3*u1**(-1) - 224*kaellen**(-1)*m1**2*
     +    u1**2 + 768*kaellen**(-1)*m1**4*t1**2*u1**(-1) - 384*
     +    kaellen**(-1)*m1**4*u1 + 704*kaellen**(-1)*m1**6*t1*u1**(-1)
     +     + 32*kaellen**(-1)*m1**6 + 256*kaellen**(-1)*m1**8*u1**(-1)
     +     - 160*kaellen**(-1)*t1*u1**2 - 128*kaellen**(-1)*t1**2*u1 + 
     +    96*kaellen**(-1)*t1**3 + 96*kaellen**(-1)*t1**4*u1**(-1) - 32
     +    *kaellen**(-1)*u1**3 - 128*m1**2*t1*u1**(-1) + 192*m1**2 + 
     +    128*m1**4*u1**(-1) )
      MM_v = MM_v + SCC(5,1)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 96
     +    *t1 - 160*t1**2*u1**(-1) + 96*u1 )
      MM_v = MM_v + SCC(9,2)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 64
     +    *s**(-1)*m1**2*u1 + 128*s**(-1)*m1**4 - 64*s**(-1)*t1*u1 - 
     +    128*m1**2*t1*u1**(-1) + 64*m1**2 - 64*t1 )
      MM_v = MM_v + SCC(9,3)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 
     +    224*s**(-1)*m1**2*t1 - 96*s**(-1)*m1**2*t1**2*u1**(-1) - 96*
     +    s**(-1)*m1**2*t1**3*u1**(-2) - 32*s**(-1)*m1**2*u1 - 96*
     +    s**(-1)*m1**4*t1*u1**(-1) - 352*s**(-1)*m1**4*t1**2*u1**(-2)
     +     + 96*s**(-1)*m1**4 - 416*s**(-1)*m1**6*t1*u1**(-2) - 32*
     +    s**(-1)*m1**6*u1**(-1) - 160*s**(-1)*m1**8*u1**(-2) + 96*
     +    s**(-1)*t1*u1 + 64*s**(-1)*t1**2 - 32*s**(-1)*t1**3*u1**(-1)
     +     - 64*s**(-1)*u1**2 + 32*m1**2*t1*u1**(-1) - 96*m1**2*t1**2*
     +    u1**(-2) - 32*m1**2 - 256*m1**4*t1*u1**(-2) + 128*m1**4*
     +    u1**(-1) - 160*m1**6*u1**(-2) + 96*t1 - 32*t1**2*u1**(-1) - 
     +    64*u1 )
      MM_v = MM_v + SCC(12,1)*susy*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*
     + prefac * ( 64*s**(-1)*m1**2*mg**2*t1*u1**(-1) + 192*s**(-1)*
     +    m1**2*mg**2 + 128*s**(-1)*mg**2*t1 + 64*s**(-1)*mg**2*t1**2*
     +    u1**(-1) + 64*s**(-1)*mg**2*u1 + 128*m1**2*mg**2*u1**(-1) + 
     +    64*mg**2*t1*u1**(-1) + 64*mg**2 )
      MM_v = MM_v + SCC(13,1)*susy*Ar2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 64*s**(-1)*m1**2*msx**2*t1*u1**(-1) + 192*s**(-1)*m1**2*
     +    msx**2 + 128*s**(-1)*msx**2*t1 + 64*s**(-1)*msx**2*t1**2*
     +    u1**(-1) + 64*s**(-1)*msx**2*u1 + 128*m1**2*msx**2*u1**(-1)
     +     + 64*msx**2*t1*u1**(-1) + 64*msx**2 )
      MM_v = MM_v + SCD(1,1)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 64
     +    *m1**4*t1*u1**(-1) + 64*t1**3*u1**(-1) )
      MM_v = MM_v + SCD(1,2)*Ar2*Nc**2*Cf*st**2*Pi**2*alphas**2*prefac
     +  * ( 128*m1**2*t1 + 64*m1**2*u1 + 256*m1**4*t1*u1**(-1) + 256*
     +    m1**4 + 256*m1**6*u1**(-1) + 64*t1*u1 )
      MM_v = MM_v + SCD(4,1)*Ar2*Cf*st**2*Pi**2*alphas**2*prefac * ( 64
     +    *s**(-1)*m1**2*t1*u1 - 64*s**(-1)*m1**2*u1**2 - 192*s**(-1)*
     +    m1**4*u1 - 128*s**(-1)*m1**6 + 64*s**(-1)*t1*u1**2 + 128*
     +    m1**2*t1 - 64*m1**2*u1 + 256*m1**4*t1*u1**(-1) - 128*m1**4 + 
     +    64*t1*u1 )

c         decouple the heavy flavors from alpha_s (4*pi*alphas outside)
c         note that here it is always mt, not mQ
      MM_v = MM_v + (born_s+born_u) / ( 16.D0 * pi**2 )  *
     &      (  susy * (Ns-1.D0)/3.D0  * log(massin(12)**2/msx**2)
     &       + 1.D0/6.D0              * log(massin(12)**2/m1**2)
     &       + 2.D0/3.D0              * log(massin(12)**2/massin(14)**2) 
     &       + susy2 * 1.D0/6.D0      * log(massin(12)**2/ms2**2)
     &       + susy * 2.D0/3.D0 * Nc  * log(massin(12)**2/mg**2)   )
ctp     &       + 2.D0/3.D0              * log(massin(12)**2/175.0**2) 

c         decouple the gluino from lambda' 
      MM_v = MM_v + (born_s+born_u) / ( 16.D0 * pi**2 ) * 
     &         susy * 3.D0 * Cf       * log(massin(12)**2/mg**2)

c               the prefactor for the scaling functions 
c                   alpha is cut out of the typical couplings 
      LE_QGV = MM_v * m1**2/4.D0

c               the phase space except for 1/s**2 
      LE_QGV = LE_QGV / ( 16.D0 * pi )

c               in this case multiply luminosity by hand
      LE_QGV = LE_QGV * lumi(1)

c               the averaging factors
      LE_QGV = LE_QGV /4.D0 /Nc /(Nc**2-1.D0)

      return
      end




