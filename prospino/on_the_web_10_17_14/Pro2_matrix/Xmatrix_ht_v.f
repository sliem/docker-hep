cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c                                                                      c
c     THE SCALING FUNCTIONS                                            c
c                                                                      c
c     HT_QGB(MASSIN,C)                                                 c
c     HT_QGV(MASSIN,C)                                                 c
c     HT_QGD(MASSIN,C)                                                 c
c                                                                      c
c     INPUT :                                                          c
c                                                                      c
c       MASSIN(1)  = s                                                 c
c       MASSIN(2)  = t2                                                c
c       MASSIN(6)  = m1                                                c
c       MASSIN(7)  = m2                                                c
c       MASSIN(9)  = mt                                                c
c       MASSIN(11) = ms                                                c
c       MASSIN(12) = qr                                                c
c       MASSIN(13) = qf                                                c
c       MASSIN(20) = del                                               c
c       MASSIN(3-5,8,10,13-19,21-30) not needed                        c
c                                                                      c
c       CL(1:4)  HIGGSINO/GAUGINO-QUARK-SQUARK COUPLING [COMPLEX]      c
c       CR(1:4)  HIGGSINO/GAUGINO-QUARK-SQUARK COUPLING [COMPLEX]      c
c       CV(1:4)  FRACTIONS OF COUPLINGS NEEDED FOR VIRTUAL [COMPLEX]   c
c                -> CLOT,CUPT,CUPU,CLOU                                c
c                                                                      c
c                                                                      c
c    ALL PHASE SPACE FACTORS INCOUDED TO GIVE                          c
c        s^2 d sig/(dtg ds4)                                           c
c                                                                      c
c    NEEDED MANDELSTAM VARIABLES :                                     c
c                                                                      c
c       Q(K1) + G(K2) -> T(P1) + H(P2) [+G(K3)]                        c
c                                                                      c
c       S  = 2(K1.K2)                                                  c
c       S3 = 2(K3.P2)                                                  c
c       S4 = 2(K3.K1)                                                  c
c       S5 = 2(P1.P2) + M1^2 + M2^2                                    c
c       T1 = 2(K1.P1)                                                  c
c       U1 = 2(K2.P1)                                                  c
c       TG = 2(K2.P2)                                                  c
c       UG = 2(K1.P2)                                                  c
c       TP = 2(K2.K3)                                                  c
c       UP = 2(K1.K3)                                                  c
c                                                                      c
c    replacements in log file:                                         c
c                                                                      c
c       []     -> ()                                                   c
c                                                                      c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c --------------------------------------------------------------------
      real*8 function HT_QGB(massin,h_l,h_r,lumi)

      implicit none 

      real*8     massin(1:30),lumi(1:3),h_l,h_r,Pi,Nc,Cf,alphas
     &          ,s,m1,m2,t1,u1,t2,h_l2,h_r2
     &          ,CHQG

      Pi = 4.D0 * atan(1.D0)
      Nc = 3.D0 
      Cf = 4.D0/3.D0

      h_l2 = h_l**2
      h_r2 = h_r**2

      s  = massin(1)
      t2 = massin(2)
      m1 = massin(6)
      m2 = massin(7)

      t1 = t2 + m2**2 - m1**2
      u1 = - s - t2

      alphas = 1.D0

      CHQG =
     +  + (h_r2+h_l2)*Nc*Cf*Pi*alphas * (  - 8 - 8*s**(-1)*t1 - 8*
     +    s**(-1)*t1**2*u1**(-1) - 4*s**(-1)*u1 + 8*s*m1**2*u1**(-2) - 
     +    4*s*u1**(-1) + 8*m1**2*t1*u1**(-2) + 8*m1**2*u1**(-1) - 8*t1*
     +    u1**(-1) )

c               the phase space except for 1/s**2 
      HT_QGB = CHQG / ( 16.D0 * pi )

c               the averaging factors
      HT_QGB = HT_QGB /4.D0 /Nc /(Nc**2-1.D0)

c               the luminosity
      HT_QGB = HT_QGB *lumi(1)

      return
      end


c --------------------------------------------------------------------
      real*8 function HT_QGD(massin,h_l,h_r,lumi)

      implicit none 

      real*8     massin(1:30),lumi(1:3),Pi,Nc,Cf,alphas,h_l,h_r
     &          ,h_l2,h_r2
     &          ,prefac,born,qf,Del,log_del,log2_del
     &          ,log_qf
     &          ,s,m1,m2,t1,u1,t2,MM_d,s4,s4p

      Pi     = 4.D0*atan(1.D0)
      Nc     = 3.D0
      Cf     = 4.D0/3.D0 
      prefac = 1.D0/(16.D0*Pi**2)

      h_l2 = h_l**2
      h_r2 = h_r**2

c               here the neutralino mass has to be positive?!?!
      s   = massin(1)
      t2  = massin(2)
      s4  = massin(3)
      m1  = massin(6)
      m2  = massin(7)
      Del = massin(14)
      s4p = massin(15)

c               the logaritms for linear s4 integration 
      log_del  =  log(s4p/m1**2)/(s4p-Del) - 1.D0/s4
      log2_del =  log(s4p/m1**2)**2/(s4p-Del) 
     &          - 2.D0*log(s4/m1**2)/s4

c               born kinematics built in
      t1 = t2 + m2**2 - m1**2

      u1 = - s - t2

c               the factorization/renormalization scale 
      qf = massin(13) 
      log_qf   = log(qf**2/m1**2)

c               alpha_s is cut, re-appears as nlo later 
      alphas = 1.D0

      born =
     +  + (h_r2+h_l2)*Nc*Cf*Pi*alphas * (  - 8 - 8*s**(-1)*t1 - 8*
     +    s**(-1)*t1**2*u1**(-1) - 4*s**(-1)*u1 + 8*s*m1**2*u1**(-2) - 
     +    4*s*u1**(-1) + 8*m1**2*t1*u1**(-2) + 8*m1**2*u1**(-1) - 8*t1*
     +    u1**(-1) )

      MM_d =
     +  + Nc*born*Pi*alphas*prefac*log_del*log_qf * (  - 16 )
      MM_d = MM_d + Nc*born*Pi*alphas*prefac*log_del * ( 16*log(
     +    m1**(-2)*s) - 16*log( - m1**(-2)*t1) - 16*log( - m1**(-2)*u1)
     +     )
      MM_d = MM_d + Nc*born*Pi*alphas*prefac*log2_del * ( 16 )
      MM_d = MM_d + Cf*born*Pi*alphas*prefac*log_del*log_qf * (  - 16 )
      MM_d = MM_d + Cf*born*Pi*alphas*prefac*log_del * (  - 16 )
      MM_d = MM_d + Cf*born*Pi*alphas*prefac*log2_del * ( 16 )

c               the phase space except for 1/s**2 
      HT_QGD = MM_d / ( 16.D0 * pi )

c               the averaging factors
      HT_QGD = HT_QGD /4.D0 /Nc /(Nc**2-1.D0)

c               the luminosity
      HT_QGD = HT_QGD *lumi(1)

      return
      end


c --------------------------------------------------------------------
      real*8 function HT_QGV(massin,h_l,h_r,lumi)

      implicit none 

      real*8     massin(1:30),lumi(1:3),h_l,h_r,Pi,Nc,Cf,Nf,zeta2,alphas
     &          ,prefac,log_qf,log_qr,kaellen,born,qf,qr,h_l2,h_r2
     &          ,s,m1,m2,t1,t2,u1,u2,u
     &          ,SCA(1:10,1:10),SCB(1:10,1:10),SCBP(1:10,1:10)
     &          ,SCC(1:10,1:10),SCD(1:10,1:10)
     &          ,Li2,MM_v
      complex*16 CSPEN

      external CSPEN

c               real part of the spence function included in D04
      Li2(s) = real( CSPEN(dcmplx(s)) )

      Pi     = 4.D0*atan(1.D0)
      zeta2  = Pi**2/6.D0
      Nf     = 6.D0
      Nc     = 3.D0
      Cf     = 4.D0/3.D0 
      prefac = 1.D0/(16.D0 * Pi**2)

      h_l2 = h_l**2
      h_r2 = h_r**2

      prefac = 1.D0/(16.D0*Pi**2)

c               here the neutralino mass has to be positive?!?!
      s   = massin(1)
      t2  = massin(2)
      m1  = massin(6)
      m2  = massin(7)

c               born kinematics built in
      t1 = t2 + m2**2 - m1**2
      u1 = - s - t2
      u2 = u1 + m1**2 - m2**2 
      
      u = u2 + m2**2 

      kaellen = s**2 +m1**4 +m2**4 - 2*( s*m1**2+s*m2**2+m1**2*m2**2 )

c               the factorization/renormalization scale 
      qr = massin(12)
      qf = massin(13) 
      log_qr = log(qr**2/m1**2)
      log_qf = log(qf**2/m1**2)

c               the scalar functions 
      call SCALAR_ARRAY_HT_2HDM(massin,SCA,SCB,SCBP,SCC,SCD)

c               alpha_s is cut, re-appears as nlo later 
      alphas = 1.D0

      born =
     +  + (h_r2+h_l2)*Nc*Cf*Pi*alphas * (  - 8 - 8*s**(-1)*t1 - 8*
     +    s**(-1)*t1**2*u1**(-1) - 4*s**(-1)*u1 + 8*s*m1**2*u1**(-2) - 
     +    4*s*u1**(-1) + 8*m1**2*t1*u1**(-2) + 8*m1**2*u1**(-1) - 8*t1*
     +    u1**(-1) )

      MM_v =
     +  + zeta2*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*prefac * ( 144 - 
     +    144*m1**2*s*u1**(-2) - 144*m1**2*t1*u1**(-2) - 144*m1**2*
     +    u1**(-1) + 144*s**(-1)*t1 + 144*s**(-1)*t1**2*u1**(-1) + 72*
     +    s**(-1)*u1 + 72*s*u1**(-1) + 144*t1*u1**(-1) )
      MM_v = MM_v + zeta2*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * (  - 
     +    48 + 48*m1**2*s*u1**(-2) + 48*m1**2*t1*u1**(-2) + 48*m1**2*
     +    u1**(-1) - 48*s**(-1)*t1 - 48*s**(-1)*t1**2*u1**(-1) - 24*
     +    s**(-1)*u1 - 24*s*u1**(-1) - 48*t1*u1**(-1) )
      MM_v = MM_v + (h_r2+h_l2)*Nc*Cf*Pi**2*alphas**2*prefac*log_qf
     +  * ( 64./3.*(Nf-1)*m1**2*s*u1**(-2) + 64./3.*(Nf-1)*m1**2*t1*
     +    u1**(-2) + 64./3.*(Nf-1)*m1**2*u1**(-1) - 64./3.*(Nf-1)*
     +    s**(-1)*t1 - 64./3.*(Nf-1)*s**(-1)*t1**2*u1**(-1) - 32./3.*
     +    (Nf-1)*s**(-1)*u1 - 32./3.*(Nf-1)*s*u1**(-1) - 64./3.*(Nf-1)*
     +    t1*u1**(-1) - 64./3.*(Nf-1) )
      MM_v = MM_v + (h_r2+h_l2)*Nc*Cf**2*Pi**2*alphas**2*prefac*log_qf
     +  * ( 96 - 96*m1**2*s*u1**(-2) - 96*m1**2*t1*u1**(-2) - 96*m1**2*
     +    u1**(-1) + 96*s**(-1)*t1 + 96*s**(-1)*t1**2*u1**(-1) + 48*
     +    s**(-1)*u1 + 48*s*u1**(-1) + 96*t1*u1**(-1) )
      MM_v = MM_v + (h_r2+h_l2)*Nc*Cf**2*Pi**2*alphas**2*prefac * (  - 
     +    320 + 64*m1**2*s*u1**(-2) + 64*m1**2*t1*u1**(-2) + 64*m1**2*
     +    u1**(-1) - 64*s**(-1)*t1 - 64*s**(-1)*t1**2*u1**(-1) - 160*
     +    s**(-1)*u1 - 160*s*u1**(-1) - 64*t1*u1**(-1) )
      MM_v = MM_v + (h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*prefac*log_qf
     +  * ( 352./3. - 352./3.*m1**2*s*u1**(-2) - 352./3.*m1**2*t1*
     +    u1**(-2) - 352./3.*m1**2*u1**(-1) + 352./3.*s**(-1)*t1 + 352./
     +    3.*s**(-1)*t1**2*u1**(-1) + 176./3.*s**(-1)*u1 + 176./3.*s*
     +    u1**(-1) + 352./3.*t1*u1**(-1) )
      MM_v = MM_v + (h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*prefac * (  - 
     +    48 + 96*m1**2*s**(-2)*t1 + 96*m1**2*s**(-2)*u2 + 176*m1**2*
     +    s**(-1)*t1*u1**(-1) - 16*m1**2*s**(-1)*t1*u**(-1) + 16*m1**2*
     +    s**(-1)*t1**2*u1**(-1)*u**(-1) + 224*m1**2*s**(-1)*u1**(-1)*
     +    u2 + 64*m1**2*s*u1**(-2) + 96*m1**2*t1*u1**(-2) - 16*m1**2*t1
     +    *u1**(-1)*u**(-1) + 128*m1**2*u1**(-2)*u2 + 48*m1**2*u1**(-1)
     +     + 16*m1**2*u**(-1) - 16*m1**4*s**(-1)*t1*u1**(-1)*u**(-1) - 
     +    16*m1**4*s*u1**(-2)*u**(-1) - 32*m1**4*t1*u1**(-2)*u**(-1) - 
     +    96*m2**2*s**(-2)*t1 - 96*m2**2*s**(-2)*u2 - 96*m2**2*s**(-1)*
     +    t1*u1**(-1) - 160*m2**2*s**(-1)*u1**(-1)*u2 - 32*m2**2*t1*
     +    u1**(-2) - 64*m2**2*u1**(-2)*u2 - 32*s**(-2)*t1*u2 - 32*
     +    s**(-2)*t1**2 - 96*s**(-1)*t1*u1**(-1)*u2 - 72*s**(-1)*t1 - 
     +    144*s**(-1)*t1**2*u1**(-1) + 16*s**(-1)*t1**2*u**(-1) - 8*
     +    s**(-1)*t1**3*u2**(-2) - 32*s**(-1)*u1 + 96*s**(-1)*u2 - 64*s
     +    *t1*u1**(-2) - 8*s*t1*u2**(-2) - 48*s*t1**2*u1**(-1)*u2**(-2)
     +     + 64*s*u1**(-2)*u2 )
      MM_v = MM_v + (h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*prefac * (  - 
     +    16*s*u1**(-1) + 16*s*u**(-1) - 24*s**2*t1*u1**(-1)*u2**(-2)
     +     - 32*t1*u1**(-2)*u2 - 168*t1*u1**(-1) + 16*t1*u**(-1) - 64*
     +    t1**2*u1**(-2) - 16*t1**2*u2**(-2) - 24*t1**3*u1**(-1)*
     +    u2**(-2) + 160*u1**(-1)*u2 + 16*u1*u**(-1) )
      MM_v = MM_v + (h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * (  - 48 - 
     +    96*m1**2*s**(-2)*t1 - 96*m1**2*s**(-2)*u2 - 144*m1**2*s**(-1)
     +    *t1*u1**(-1) - 16*m1**2*s**(-1)*t1*u**(-1) + 16*m1**2*s**(-1)
     +    *t1**2*u1**(-1)*u**(-1) - 224*m1**2*s**(-1)*u1**(-1)*u2 - 32*
     +    m1**2*t1*u1**(-2) - 16*m1**2*t1*u1**(-1)*u**(-1) - 128*m1**2*
     +    u1**(-2)*u2 - 16*m1**2*u1**(-1) + 16*m1**2*u**(-1) - 16*m1**4
     +    *s**(-1)*t1*u1**(-1)*u**(-1) - 16*m1**4*s*u1**(-2)*u**(-1) - 
     +    32*m1**4*t1*u1**(-2)*u**(-1) + 96*m2**2*s**(-2)*t1 + 96*m2**2
     +    *s**(-2)*u2 + 96*m2**2*s**(-1)*t1*u1**(-1) + 160*m2**2*
     +    s**(-1)*u1**(-1)*u2 + 32*m2**2*t1*u1**(-2) + 64*m2**2*
     +    u1**(-2)*u2 + 32*s**(-2)*t1*u2 + 32*s**(-2)*t1**2 + 96*
     +    s**(-1)*t1*u1**(-1)*u2 + 32*s**(-1)*t1 + 112*s**(-1)*t1**2*
     +    u1**(-1) + 16*s**(-1)*t1**2*u**(-1) + 16*s**(-1)*t1**3*
     +    u2**(-2) - 96*s**(-1)*u2 + 64*s*t1*u1**(-2) + 16*s*t1*
     +    u2**(-2) - 64*s*u1**(-2)*u2 - 48*s*u1**(-1) + 16*s*u**(-1) + 
     +    32*t1*u1**(-2)*u2 )
      MM_v = MM_v + (h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 128*t1*
     +    u1**(-1) + 16*t1*u**(-1) + 64*t1**2*u1**(-2) + 32*t1**2*
     +    u2**(-2) - 160*u1**(-1)*u2 + 16*u1*u**(-1) )
      MM_v = MM_v + Nc*Pi*alphas*prefac * ( 44./3.*born*log_qr )
      MM_v = MM_v + Cf*Pi*alphas*prefac * ( 24*born*log_qr + 4*born )
      MM_v = MM_v + Pi*alphas*prefac * (  - 8./3.*(Nf-1)*born*log_qr - 
     +    8./3.*born*log_qr )
      MM_v = MM_v + log(abs(-1+m1**(-2)*m2**2))*(h_r2+h_l2)*Nc**2*Cf*
     + Pi**2*alphas**2*prefac * (  - 48 - 64*m1**2*m2**2*s**(-1)*t1*
     +    u1**(-1)*u2**(-1) - 64*m1**2*m2**2*s**(-1)*u1**(-1) - 64*
     +    m1**2*m2**2*t1*u1**(-2)*u2**(-1) - 64*m1**2*m2**2*u1**(-2) + 
     +    32*m1**2*s*u1**(-2) + 32*m1**2*u1**(-1) + 32*m1**4*s**(-1)*t1
     +    *u1**(-1)*u2**(-1) + 32*m1**4*s**(-1)*u1**(-1) + 32*m1**4*t1*
     +    u1**(-2)*u2**(-1) + 32*m1**4*u1**(-2) - 32*m2**2*s*u1**(-2)
     +     - 32*m2**2*u1**(-1) + 32*m2**4*s**(-1)*t1*u1**(-1)*u2**(-1)
     +     + 32*m2**4*s**(-1)*u1**(-1) + 32*m2**4*t1*u1**(-2)*u2**(-1)
     +     + 32*m2**4*u1**(-2) - 8*s**(-1)*t1*u1*u2**(-1) + 8*s**(-1)*
     +    t1**2*u2**(-1) - 8*s**(-1)*t1**3*u1*u2**(-3) - 8*s**(-1)*
     +    t1**4*u2**(-3) - 16*s**(-1)*u1 + 40*s*t1*u1**(-1)*u2**(-1) - 
     +    8*s*t1*u1*u2**(-3) - 72*s*t1**2*u2**(-3) - 72*s*t1**3*
     +    u1**(-1)*u2**(-3) - 16*s*u1**(-1) + 16*s*u2**(-1) - 32*s**2*
     +    t1*u2**(-3) - 72*s**2*t1**2*u1**(-1)*u2**(-3) + 16*s**2*
     +    u1**(-1)*u2**(-1) )
      MM_v = MM_v + log(abs(-1+m1**(-2)*m2**2))*(h_r2+h_l2)*Nc**2*Cf*
     + Pi**2*alphas**2*prefac * (  - 24*s**3*t1*u1**(-1)*u2**(-3) + 16*
     +    t1*u2**(-1) + 24*t1**2*u1**(-1)*u2**(-1) - 16*t1**2*u1*
     +    u2**(-3) - 48*t1**3*u2**(-3) - 24*t1**4*u1**(-1)*u2**(-3) + 
     +    16*u1*u2**(-1) )
      MM_v = MM_v + log(abs(-1+m1**(-2)*m2**2))*(h_r2+h_l2)*Cf*Pi**2*
     + alphas**2*prefac * ( 32 + 64*m1**2*m2**2*s**(-1)*t1*u1**(-1)*
     +    u2**(-1) + 64*m1**2*m2**2*s**(-1)*u1**(-1) + 64*m1**2*m2**2*
     +    t1*u1**(-2)*u2**(-1) + 64*m1**2*m2**2*u1**(-2) + 32*m1**2*
     +    s**(-1)*t1*u2**(-1) - 32*m1**2*s**(-1)*t1**3*u2**(-3) - 32*
     +    m1**2*s*t1*u2**(-3) - 32*m1**2*s*u1**(-2) - 64*m1**2*t1**2*
     +    u2**(-3) - 32*m1**2*u1**(-1) - 32*m1**4*s**(-1)*t1*u1**(-1)*
     +    u2**(-1) - 32*m1**4*s**(-1)*u1**(-1) - 32*m1**4*t1*u1**(-2)*
     +    u2**(-1) - 32*m1**4*u1**(-2) + 32*m2**2*s*u1**(-2) + 32*m2**2
     +    *u1**(-1) - 32*m2**4*s**(-1)*t1*u1**(-1)*u2**(-1) - 32*m2**4*
     +    s**(-1)*u1**(-1) - 32*m2**4*t1*u1**(-2)*u2**(-1) - 32*m2**4*
     +    u1**(-2) + 32*s**(-1)*t1*u1*u2**(-1) - 16*s**(-1)*t1**3*u1*
     +    u2**(-3) + 16*s**(-1)*u1 - 16*s*t1*u1**(-1)*u2**(-1) - 16*s*
     +    t1*u1*u2**(-3) + 32*s*u1**(-1) + 16*s*t2**(-1) - 32*s*
     +    u2**(-1) + 16*s**2*u1**(-1)*t2**(-1) - 16*s**2*u1**(-1)*
     +    u2**(-1) )
      MM_v = MM_v + log(abs(-1+m1**(-2)*m2**2))*(h_r2+h_l2)*Cf*Pi**2*
     + alphas**2*prefac * (  - 32*t1**2*u1*u2**(-3) - 16*u1*u2**(-1) )
      MM_v = MM_v + log( - m1**(-2)*t1)*(h_r2+h_l2)*Nc*Cf**2*Pi**2*
     + alphas**2*prefac*log_qf * (  - 128 + 128*m1**2*s*u1**(-2) + 128*
     +    m1**2*t1*u1**(-2) + 128*m1**2*u1**(-1) - 128*s**(-1)*t1 - 128
     +    *s**(-1)*t1**2*u1**(-1) - 64*s**(-1)*u1 - 64*s*u1**(-1) - 128
     +    *t1*u1**(-1) )
      MM_v = MM_v + log( - m1**(-2)*t1)*(h_r2+h_l2)*Nc*Cf**2*Pi**2*
     + alphas**2*prefac * (  - 128 - 64*s**(-1)*u1 - 64*s*u1**(-1) )
      MM_v = MM_v + log( - m1**(-2)*t1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * ( 64 + 32*s**(-1)*u1 + 32*s*u1**(-1) )
      MM_v = MM_v + log( - m1**(-2)*t1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2
     + *prefac * (  - 64 - 32*s**(-1)*u1 - 48*s*u1**(-1) - 16*s*
     +    t2**(-1) - 16*s**2*u1**(-1)*t2**(-1) )
      MM_v = MM_v + log( - m1**(-2)*u1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac*log_qf * (  - 128 + 128*m1**2*s*u1**(-2) + 128*
     +    m1**2*t1*u1**(-2) + 128*m1**2*u1**(-1) - 128*s**(-1)*t1 - 128
     +    *s**(-1)*t1**2*u1**(-1) - 64*s**(-1)*u1 - 64*s*u1**(-1) - 128
     +    *t1*u1**(-1) )
      MM_v = MM_v + log( - m1**(-2)*u1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * ( 48 + 64*m1**2*m2**2*s**(-1)*t1*u1**(-1)*
     +    u2**(-1) + 64*m1**2*m2**2*s**(-1)*u1**(-1) + 64*m1**2*m2**2*
     +    t1*u1**(-2)*u2**(-1) + 64*m1**2*m2**2*u1**(-2) - 32*m1**2*s*
     +    u1**(-2) - 32*m1**2*u1**(-1) - 32*m1**4*s**(-1)*t1*u1**(-1)*
     +    u2**(-1) - 32*m1**4*s**(-1)*u1**(-1) - 32*m1**4*t1*u1**(-2)*
     +    u2**(-1) - 32*m1**4*u1**(-2) + 32*m2**2*s*u1**(-2) + 32*m2**2
     +    *u1**(-1) - 32*m2**4*s**(-1)*t1*u1**(-1)*u2**(-1) - 32*m2**4*
     +    s**(-1)*u1**(-1) - 32*m2**4*t1*u1**(-2)*u2**(-1) - 32*m2**4*
     +    u1**(-2) + 8*s**(-1)*t1*u1*u2**(-1) - 8*s**(-1)*t1**2*
     +    u2**(-1) + 8*s**(-1)*t1**3*u1*u2**(-3) + 8*s**(-1)*t1**4*
     +    u2**(-3) + 16*s**(-1)*u1 - 40*s*t1*u1**(-1)*u2**(-1) + 8*s*t1
     +    *u1*u2**(-3) + 72*s*t1**2*u2**(-3) + 72*s*t1**3*u1**(-1)*
     +    u2**(-3) + 16*s*u1**(-1) - 16*s*u2**(-1) + 32*s**2*t1*
     +    u2**(-3) + 72*s**2*t1**2*u1**(-1)*u2**(-3) - 16*s**2*u1**(-1)
     +    *u2**(-1) )
      MM_v = MM_v + log( - m1**(-2)*u1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * ( 24*s**3*t1*u1**(-1)*u2**(-3) - 16*t1*
     +    u2**(-1) - 24*t1**2*u1**(-1)*u2**(-1) + 16*t1**2*u1*u2**(-3)
     +     + 48*t1**3*u2**(-3) + 24*t1**4*u1**(-1)*u2**(-3) - 16*u1*
     +    u2**(-1) )
      MM_v = MM_v + log( - m1**(-2)*u1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2
     + *prefac * (  - 32 - 64*m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2**(-1)
     +     - 64*m1**2*m2**2*s**(-1)*u1**(-1) - 64*m1**2*m2**2*t1*
     +    u1**(-2)*u2**(-1) - 64*m1**2*m2**2*u1**(-2) - 32*m1**2*
     +    s**(-1)*t1*u2**(-1) + 32*m1**2*s**(-1)*t1**3*u2**(-3) + 32*
     +    m1**2*s*t1*u2**(-3) + 32*m1**2*s*u1**(-2) + 64*m1**2*t1**2*
     +    u2**(-3) + 32*m1**2*u1**(-1) + 32*m1**4*s**(-1)*t1*u1**(-1)*
     +    u2**(-1) + 32*m1**4*s**(-1)*u1**(-1) + 32*m1**4*t1*u1**(-2)*
     +    u2**(-1) + 32*m1**4*u1**(-2) - 32*m2**2*s*u1**(-2) - 32*m2**2
     +    *u1**(-1) + 32*m2**4*s**(-1)*t1*u1**(-1)*u2**(-1) + 32*m2**4*
     +    s**(-1)*u1**(-1) + 32*m2**4*t1*u1**(-2)*u2**(-1) + 32*m2**4*
     +    u1**(-2) - 32*s**(-1)*t1*u1*u2**(-1) + 16*s**(-1)*t1**3*u1*
     +    u2**(-3) - 16*s**(-1)*u1 + 16*s*t1*u1**(-1)*u2**(-1) + 16*s*
     +    t1*u1*u2**(-3) - 16*s*u1**(-1) + 32*s*u2**(-1) + 16*s**2*
     +    u1**(-1)*u2**(-1) + 32*t1**2*u1*u2**(-3) + 16*u1*u2**(-1) )
      MM_v = MM_v + Li2(1 - m1**(-2)*s**(-1)*t1*u1)*(h_r2+h_l2)*Nc**2*
     + Cf*Pi**2*alphas**2*prefac * ( 64 - 64*m1**2*s*u1**(-2) - 64*
     +    m1**2*t1*u1**(-2) - 64*m1**2*u1**(-1) + 64*s**(-1)*t1 + 64*
     +    s**(-1)*t1**2*u1**(-1) + 32*s**(-1)*u1 + 32*s*u1**(-1) + 64*
     +    t1*u1**(-1) )
      MM_v = MM_v + SCA(1,1)*(h_r2+h_l2)*Nc*Cf**2*Pi**2*alphas**2*
     + prefac * (  - 64*m1**2*s**(-1)*t1*u1**(-1)*u**(-1) - 64*m1**2*
     +    s**(-1)*t1**2*u1**(-2)*u**(-1) - 128*m1**2*s*u1**(-3) + 64*
     +    m1**2*s*u1**(-2)*u**(-1) - 128*m1**2*t1*u1**(-3) + 32*m1**2*
     +    t1*u1**(-2)*u**(-1) - 64*m1**2*u1**(-2) + 128*m1**4*s*
     +    u1**(-3)*u**(-1) + 128*m1**4*t1*u1**(-3)*u**(-1) + 64*m1**4*
     +    u1**(-2)*u**(-1) + 64*s**(-1)*t1*u1**(-1) - 32*s**(-1)*t1*
     +    u**(-1) + 64*s**(-1)*t1**2*u1**(-2) - 32*s**(-1)*t1**2*
     +    u1**(-1)*u**(-1) - 32*s*u1**(-1)*u**(-1) + 32*t1*u1**(-2) - 
     +    32*t1*u1**(-1)*u**(-1) + 32*u1**(-1) - 32*u**(-1) )
      MM_v = MM_v + SCA(1,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * ( 16*m1**2*s**(-1)*t1*u1**(-1)*u**(-1) + 16*m1**2*s*
     +    u1**(-2)*u**(-1) + 32*m1**2*t1*u1**(-2)*u**(-1) - 16*s**(-1)*
     +    t1*u1**(-1) - 16*s**(-1)*t1**2*u1**(-1)*u**(-1) + 32*s*
     +    u1**(-2) - 16*s*u1**(-1)*u**(-1) - 16*t1*u1**(-1)*u**(-1) + 
     +    16*u1**(-1) - 16*u**(-1) )
      MM_v = MM_v + SCA(1,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +     - 16*m1**2*s**(-1)*t1*u1**(-1)*u**(-1) - 16*m1**2*s*u1**(-2)
     +    *u**(-1) - 32*m1**2*t1*u1**(-2)*u**(-1) + 16*s**(-1)*t1*
     +    u1**(-1) + 16*s**(-1)*t1**2*u1**(-1)*u**(-1) - 32*s*u1**(-2)
     +     + 16*s*u1**(-1)*u**(-1) + 16*t1*u1**(-1)*u**(-1) - 16*
     +    u1**(-1) + 16*u**(-1) )
      MM_v = MM_v + SCA(1,1)*Cf*Pi*alphas*prefac * (  - 4*m1**(-2)*born
     +     )
      MM_v = MM_v + SCB(1,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +    32*m1**2*s*t2**(-2) + 32*m1**2*s**2*u1**(-1)*t2**(-2) - 32*
     +    m1**2*u1**(-1) - 32*m1**2*t2**(-1) + 32*s*t1*t2**(-2) - 16*s*
     +    u1**(-1) - 16*s*t2**(-1) + 32*s**2*t1*u1**(-1)*t2**(-2) + 16*
     +    s**2*t2**(-2) + 16*s**3*u1**(-1)*t2**(-2) - 32*t1*u1**(-1) - 
     +    32*t1*t2**(-1) )
      MM_v = MM_v + SCB(1,1)*Pi*alphas*prefac * (  - 8./3.*born )
      MM_v = MM_v + SCB(2,1)*(h_r2+h_l2)*kaellen**(-1)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * ( 32*m1**2*m2**2*s**(-2)*t1*u2 + 32*m1**2*
     +    m2**2*s**(-2)*t1**2 + 64*m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2
     +     + 64*m1**2*m2**2*s**(-1)*t1 + 64*m1**2*m2**2*s**(-1)*t1**2*
     +    u1**(-1) + 96*m1**2*m2**2*t1*u1**(-1) - 16*m1**2*m2**4*
     +    s**(-1)*t1*u1**(-1) + 64*m1**2*s**(-1)*t1*u1 - 32*m1**2*
     +    s**(-1)*t1*u2 + 32*m1**2*s**(-1)*u1**2 - 80*m1**2*s*t1*
     +    u1**(-1) + 64*m1**2*s - 64*m1**2*t1*u1**(-1)*u2 + 96*m1**2*t1
     +     - 48*m1**2*t1**2*u1**(-1) + 112*m1**2*u1 - 32*m1**4*m2**2*
     +    s**(-1)*u1**(-1)*u2 + 96*m1**4*s**(-2)*t1*u2 + 32*m1**4*
     +    s**(-2)*t1**2 + 64*m1**4*s**(-2)*u2**2 + 192*m1**4*s**(-1)*t1
     +    *u1**(-1)*u2 + 64*m1**4*s**(-1)*t1 + 64*m1**4*s**(-1)*t1**2*
     +    u1**(-1) + 128*m1**4*s**(-1)*u1**(-1)*u2**2 + 128*m1**4*
     +    s**(-1)*u2 - 64*m1**4*s*u1**(-1) + 64*m1**4*t1*u1**(-1) + 160
     +    *m1**4*u1**(-1)*u2 - 128*m1**4 + 16*m1**6*s**(-1)*t1*u1**(-1)
     +     + 32*m1**6*s**(-1)*u1**(-1)*u2 )
      MM_v = MM_v + SCB(2,1)*(h_r2+h_l2)*kaellen**(-1)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * (  - 80*s**(-1)*t1*u1**2 - 88*s**(-1)*t1**2*
     +    u1 - 32*s**(-1)*t1**3 - 24*s**(-1)*u1**3 - 32*t1*u1 - 16*
     +    t1**2 - 16*u1**2 )
      MM_v = MM_v + SCB(2,1)*(h_r2+h_l2)*kaellen**(-1)*Cf*Pi**2*
     + alphas**2*prefac * (  - 32*m1**2*m2**2*s**(-2)*t1*u2 - 32*m1**2*
     +    m2**2*s**(-2)*t1**2 - 64*m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2
     +     - 64*m1**2*m2**2*s**(-1)*t1 - 64*m1**2*m2**2*s**(-1)*t1**2*
     +    u1**(-1) - 96*m1**2*m2**2*t1*u1**(-1) + 16*m1**2*m2**4*
     +    s**(-1)*t1*u1**(-1) + 32*m1**2*s**(-1)*t1*u2 + 32*m1**2*
     +    s**(-1)*t1**2 + 16*m1**2*s*t1*u1**(-1) + 64*m1**2*t1*u1**(-1)
     +    *u2 + 128*m1**2*t1 + 64*m1**2*t1**2*u1**(-1) + 32*m1**4*m2**2
     +    *s**(-1)*u1**(-1)*u2 - 96*m1**4*s**(-2)*t1*u2 - 32*m1**4*
     +    s**(-2)*t1**2 - 64*m1**4*s**(-2)*u2**2 - 192*m1**4*s**(-1)*t1
     +    *u1**(-1)*u2 - 64*m1**4*s**(-1)*t1 - 64*m1**4*s**(-1)*t1**2*
     +    u1**(-1) - 128*m1**4*s**(-1)*u1**(-1)*u2**2 - 128*m1**4*
     +    s**(-1)*u2 - 64*m1**4*t1*u1**(-1) - 160*m1**4*u1**(-1)*u2 - 
     +    16*m1**6*s**(-1)*t1*u1**(-1) - 32*m1**6*s**(-1)*u1**(-1)*u2
     +     - 16*s**(-1)*t1*u1**2 - 32*s**(-1)*t1**2*u1 - 16*s**(-1)*
     +    t1**3 )
      MM_v = MM_v + SCB(2,1)*(h_r2+h_l2)*kaellen**(-1)*Cf*Pi**2*
     + alphas**2*prefac * ( 16*t1*u1 + 32*t1**2 + 16*t1**3*u1**(-1) )
      MM_v = MM_v + SCB(2,1)*(h_r2+h_l2)*Nc*Cf**2*Pi**2*alphas**2*
     + prefac * ( 128*m1**2*s**(-1)*t1*u1**(-1) + 128*m1**2*s**(-1)*
     +    t1**2*u1**(-2) + 64*m1**2*t1*u1**(-2) + 64*m1**2*u1**(-1) - 
     +    256*m1**4*s*u1**(-3) - 256*m1**4*t1*u1**(-3) - 128*m1**4*
     +    u1**(-2) )
      MM_v = MM_v + SCB(2,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * (  - 16 - 112*m1**2*s**(-1)*t1*u1**(-1) - 64*m1**2*
     +    s**(-1)*t1**2*u1**(-2) - 32*m1**2*s**(-1)*u1**(-1)*u2 - 32*
     +    m1**2*s**(-1) + 32*m1**2*s*u1**(-2) + 32*m1**2*t1*u1**(-2) - 
     +    48*m1**2*u1**(-1) + 128*m1**4*s*u1**(-3) + 128*m1**4*t1*
     +    u1**(-3) + 128*m1**4*u1**(-2) + 32*m2**2*s**(-2)*t1 + 32*
     +    m2**2*s**(-2)*u2 + 32*m2**2*s**(-1)*u1**(-1)*u2 + 32*s**(-2)*
     +    t1*u2 + 32*s**(-2)*t1**2 + 64*s**(-1)*t1*u1**(-1)*u2 + 32*
     +    s**(-1)*t1 + 32*s**(-1)*t1**2*u1**(-1) + 24*s**(-1)*u1 - 32*
     +    s**(-1)*u2 - 32*s*u1**(-1) + 32*t1*u1**(-1) - 32*u1**(-1)*u2
     +     )
      MM_v = MM_v + SCB(2,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +    32 + 112*m1**2*s**(-1)*t1*u1**(-1) + 64*m1**2*s**(-1)*t1**2*
     +    u1**(-2) + 32*m1**2*s**(-1)*u1**(-1)*u2 - 32*m1**2*s*u1**(-2)
     +     + 32*m1**2*u1**(-1) - 160*m1**4*s*u1**(-3) - 128*m1**4*t1*
     +    u1**(-3) - 128*m1**4*u1**(-2) - 32*m2**2*s**(-2)*t1 - 32*
     +    m2**2*s**(-2)*u2 - 32*m2**2*s**(-1)*u1**(-1)*u2 - 32*s**(-2)*
     +    t1*u2 - 32*s**(-2)*t1**2 - 64*s**(-1)*t1*u1**(-1)*u2 + 16*
     +    s**(-1)*t1 - 32*s**(-1)*t1**2*u1**(-1) + 32*s**(-1)*u2 + 32*s
     +    *u1**(-1) - 48*t1*u1**(-1) + 32*u1**(-1)*u2 )
      MM_v = MM_v + SCB(3,1)*(h_r2+h_l2)*kaellen**(-1)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * (  - 96*m1**2*m2**2*s**(-2)*t1*u2 - 64*m1**2*
     +    m2**2*s**(-2)*t1**2 - 32*m1**2*m2**2*s**(-2)*u2**2 - 192*
     +    m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2 - 128*m1**2*m2**2*s**(-1)*
     +    t1 - 128*m1**2*m2**2*s**(-1)*t1**2*u1**(-1) - 64*m1**2*m2**2*
     +    s**(-1)*u1**(-1)*u2**2 - 64*m1**2*m2**2*s**(-1)*u2 - 160*
     +    m1**2*m2**2*t1*u1**(-1) - 96*m1**2*m2**2*u1**(-1)*u2 + 32*
     +    m1**2*m2**4*s**(-1)*t1*u1**(-1) + 16*m1**2*m2**4*s**(-1)*
     +    u1**(-1)*u2 - 64*m1**2*s**(-1)*t1*u1 + 32*m1**2*s**(-1)*t1*u2
     +     - 32*m1**2*s**(-1)*t1**2 - 32*m1**2*s**(-1)*u1**2 + 32*m1**2
     +    *s**(-1)*u2**2 + 80*m1**2*s*u1**(-1)*u2 - 64*m1**2*s + 64*
     +    m1**2*t1*u1**(-1)*u2 - 160*m1**2*t1 - 16*m1**2*t1**2*u1**(-1)
     +     + 64*m1**2*u1**(-1)*u2**2 - 112*m1**2*u1 + 64*m1**2*u2 - 32*
     +    m1**4*m2**2*s**(-1)*t1*u1**(-1) - 32*m1**4*s**(-2)*t1*u2 - 32
     +    *m1**4*s**(-2)*u2**2 - 64*m1**4*s**(-1)*t1*u1**(-1)*u2 - 64*
     +    m1**4*s**(-1)*u1**(-1)*u2**2 )
      MM_v = MM_v + SCB(3,1)*(h_r2+h_l2)*kaellen**(-1)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * (  - 64*m1**4*s**(-1)*u2 + 64*m1**4*s*
     +    u1**(-1) - 64*m1**4*u1**(-1)*u2 + 128*m1**4 - 16*m1**6*
     +    s**(-1)*u1**(-1)*u2 + 80*s**(-1)*t1*u1**2 + 88*s**(-1)*t1**2*
     +    u1 + 32*s**(-1)*t1**3 + 24*s**(-1)*u1**3 + 32*t1*u1 + 16*
     +    t1**2 + 16*u1**2 )
      MM_v = MM_v + SCB(3,1)*(h_r2+h_l2)*kaellen**(-1)*Cf*Pi**2*
     + alphas**2*prefac * ( 96*m1**2*m2**2*s**(-2)*t1*u2 + 64*m1**2*
     +    m2**2*s**(-2)*t1**2 + 32*m1**2*m2**2*s**(-2)*u2**2 + 192*
     +    m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2 + 128*m1**2*m2**2*s**(-1)*
     +    t1 + 128*m1**2*m2**2*s**(-1)*t1**2*u1**(-1) + 64*m1**2*m2**2*
     +    s**(-1)*u1**(-1)*u2**2 + 64*m1**2*m2**2*s**(-1)*u2 + 160*
     +    m1**2*m2**2*t1*u1**(-1) + 96*m1**2*m2**2*u1**(-1)*u2 - 32*
     +    m1**2*m2**4*s**(-1)*t1*u1**(-1) - 16*m1**2*m2**4*s**(-1)*
     +    u1**(-1)*u2 - 32*m1**2*s**(-1)*t1*u2 - 32*m1**2*s**(-1)*u2**2
     +     + 64*m1**2*s*t1*u1**(-1) - 80*m1**2*s*u1**(-1)*u2 - 64*m1**2
     +    *t1*u1**(-1)*u2 - 64*m1**2*t1 - 64*m1**2*u1**(-1)*u2**2 - 64*
     +    m1**2*u2 + 32*m1**4*m2**2*s**(-1)*t1*u1**(-1) + 32*m1**4*
     +    s**(-2)*t1*u2 + 32*m1**4*s**(-2)*u2**2 + 64*m1**4*s**(-1)*t1*
     +    u1**(-1)*u2 + 64*m1**4*s**(-1)*u1**(-1)*u2**2 + 64*m1**4*
     +    s**(-1)*u2 + 64*m1**4*u1**(-1)*u2 + 16*m1**6*s**(-1)*u1**(-1)
     +    *u2 )
      MM_v = MM_v + SCB(3,1)*(h_r2+h_l2)*kaellen**(-1)*Cf*Pi**2*
     + alphas**2*prefac * ( 16*s**(-1)*t1*u1**2 + 32*s**(-1)*t1**2*u1
     +     + 16*s**(-1)*t1**3 - 16*t1*u1 - 32*t1**2 - 16*t1**3*u1**(-1)
     +     )
      MM_v = MM_v + SCB(3,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * (  - 16 - 32*m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2**(-1)
     +     - 32*m1**2*s**(-2)*t1 - 32*m1**2*s**(-2)*u2 - 96*m1**2*
     +    s**(-1)*t1*u1**(-1) - 112*m1**2*s**(-1)*u1**(-1)*u2 - 96*
     +    m1**2*s*u1**(-2) - 96*m1**2*t1*u1**(-2) - 96*m1**2*u1**(-2)*
     +    u2 - 112*m1**2*u1**(-1) - 32*m1**4*s**(-1)*u1**(-1) - 64*
     +    m1**4*u1**(-2) - 24*s**(-1)*t1 - 8*s**(-1)*t1**3*u2**(-2) - 
     +    24*s**(-1)*u1 - 8*s*t1*u2**(-2) + 32*s*t1**2*u1**(-1)*
     +    u2**(-2) + 16*s**2*t1*u1**(-1)*u2**(-2) - 16*t1*u1**(-1) - 16
     +    *t1**2*u2**(-2) + 16*t1**3*u1**(-1)*u2**(-2) )
      MM_v = MM_v + SCB(3,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +    32*m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2**(-1) + 32*m1**2*
     +    s**(-2)*t1 + 32*m1**2*s**(-2)*u2 + 96*m1**2*s**(-1)*t1*
     +    u1**(-1) + 112*m1**2*s**(-1)*u1**(-1)*u2 + 32*m1**2*s**(-1)
     +     + 96*m1**2*s*u1**(-2) - 32*m1**2*s*t2**(-2) - 32*m1**2*s**2*
     +    u1**(-1)*t2**(-2) + 96*m1**2*t1*u1**(-2) + 96*m1**2*u1**(-2)*
     +    u2 + 160*m1**2*u1**(-1) + 32*m1**2*t2**(-1) + 32*m1**4*
     +    s**(-1)*u1**(-1) + 64*m1**4*u1**(-2) - 16*s**(-1)*t1**3*
     +    u2**(-2) - 32*s*t1*t2**(-2) - 16*s*t1*u2**(-2) + 32*s*t1**2*
     +    u1**(-1)*u2**(-2) + 16*s*u1**(-1) + 16*s*t2**(-1) - 32*s**2*
     +    t1*u1**(-1)*t2**(-2) + 16*s**2*t1*u1**(-1)*u2**(-2) - 16*s**2
     +    *t2**(-2) - 16*s**3*u1**(-1)*t2**(-2) + 32*t1*u1**(-1) + 32*
     +    t1*t2**(-1) - 32*t1**2*u2**(-2) + 16*t1**3*u1**(-1)*u2**(-2)
     +     )
      MM_v = MM_v + SCB(4,1)*(h_r2+h_l2)*kaellen**(-1)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * ( 64*m1**2*m2**2*s**(-2)*t1*u2 + 32*m1**2*
     +    m2**2*s**(-2)*t1**2 + 32*m1**2*m2**2*s**(-2)*u2**2 + 128*
     +    m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2 + 64*m1**2*m2**2*s**(-1)*
     +    t1 + 64*m1**2*m2**2*s**(-1)*t1**2*u1**(-1) + 64*m1**2*m2**2*
     +    s**(-1)*u1**(-1)*u2**2 + 64*m1**2*m2**2*s**(-1)*u2 + 64*m1**2
     +    *m2**2*t1*u1**(-1) + 96*m1**2*m2**2*u1**(-1)*u2 - 16*m1**2*
     +    m2**4*s**(-1)*t1*u1**(-1) - 16*m1**2*m2**4*s**(-1)*u1**(-1)*
     +    u2 + 32*m1**2*s**(-1)*t1**2 - 32*m1**2*s**(-1)*u2**2 + 80*
     +    m1**2*s*t1*u1**(-1) - 80*m1**2*s*u1**(-1)*u2 + 64*m1**2*t1 + 
     +    64*m1**2*t1**2*u1**(-1) - 64*m1**2*u1**(-1)*u2**2 - 64*m1**2*
     +    u2 + 32*m1**4*m2**2*s**(-1)*t1*u1**(-1) + 32*m1**4*m2**2*
     +    s**(-1)*u1**(-1)*u2 - 64*m1**4*s**(-2)*t1*u2 - 32*m1**4*
     +    s**(-2)*t1**2 - 32*m1**4*s**(-2)*u2**2 - 128*m1**4*s**(-1)*t1
     +    *u1**(-1)*u2 - 64*m1**4*s**(-1)*t1 - 64*m1**4*s**(-1)*t1**2*
     +    u1**(-1) )
      MM_v = MM_v + SCB(4,1)*(h_r2+h_l2)*kaellen**(-1)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * (  - 64*m1**4*s**(-1)*u1**(-1)*u2**2 - 64*
     +    m1**4*s**(-1)*u2 - 64*m1**4*t1*u1**(-1) - 96*m1**4*u1**(-1)*
     +    u2 - 16*m1**6*s**(-1)*t1*u1**(-1) - 16*m1**6*s**(-1)*u1**(-1)
     +    *u2 )
      MM_v = MM_v + SCB(4,1)*(h_r2+h_l2)*kaellen**(-1)*Cf*Pi**2*
     + alphas**2*prefac * (  - 64*m1**2*m2**2*s**(-2)*t1*u2 - 32*m1**2*
     +    m2**2*s**(-2)*t1**2 - 32*m1**2*m2**2*s**(-2)*u2**2 - 128*
     +    m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2 - 64*m1**2*m2**2*s**(-1)*
     +    t1 - 64*m1**2*m2**2*s**(-1)*t1**2*u1**(-1) - 64*m1**2*m2**2*
     +    s**(-1)*u1**(-1)*u2**2 - 64*m1**2*m2**2*s**(-1)*u2 - 64*m1**2
     +    *m2**2*t1*u1**(-1) - 96*m1**2*m2**2*u1**(-1)*u2 + 16*m1**2*
     +    m2**4*s**(-1)*t1*u1**(-1) + 16*m1**2*m2**4*s**(-1)*u1**(-1)*
     +    u2 - 32*m1**2*s**(-1)*t1**2 + 32*m1**2*s**(-1)*u2**2 - 80*
     +    m1**2*s*t1*u1**(-1) + 80*m1**2*s*u1**(-1)*u2 - 64*m1**2*t1 - 
     +    64*m1**2*t1**2*u1**(-1) + 64*m1**2*u1**(-1)*u2**2 + 64*m1**2*
     +    u2 - 32*m1**4*m2**2*s**(-1)*t1*u1**(-1) - 32*m1**4*m2**2*
     +    s**(-1)*u1**(-1)*u2 + 64*m1**4*s**(-2)*t1*u2 + 32*m1**4*
     +    s**(-2)*t1**2 + 32*m1**4*s**(-2)*u2**2 + 128*m1**4*s**(-1)*t1
     +    *u1**(-1)*u2 + 64*m1**4*s**(-1)*t1 + 64*m1**4*s**(-1)*t1**2*
     +    u1**(-1) )
      MM_v = MM_v + SCB(4,1)*(h_r2+h_l2)*kaellen**(-1)*Cf*Pi**2*
     + alphas**2*prefac * ( 64*m1**4*s**(-1)*u1**(-1)*u2**2 + 64*m1**4*
     +    s**(-1)*u2 + 64*m1**4*t1*u1**(-1) + 96*m1**4*u1**(-1)*u2 + 16
     +    *m1**6*s**(-1)*t1*u1**(-1) + 16*m1**6*s**(-1)*u1**(-1)*u2 )
      MM_v = MM_v + SCB(4,1)*(h_r2+h_l2)*Nc*Cf**2*Pi**2*alphas**2*
     + prefac * ( 32 - 32*m1**2*u1**(-1) + 32*s**(-1)*t1 + 32*s**(-1)*
     +    t1**2*u1**(-1) + 32*s**(-1)*u1 + 32*t1*u1**(-1) )
      MM_v = MM_v + SCB(4,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * ( 16 - 32*m1**2*s**(-2)*t1 - 32*m1**2*s**(-2)*u2 - 16*
     +    m1**2*s**(-1)*t1*u1**(-1) - 48*m1**2*s**(-1)*u1**(-1)*u2 + 16
     +    *m1**2*u1**(-1) + 32*m2**2*s**(-2)*t1 + 32*m2**2*s**(-2)*u2
     +     + 32*m2**2*s**(-1)*u1**(-1)*u2 + 32*s**(-2)*t1*u2 + 32*
     +    s**(-2)*t1**2 + 64*s**(-1)*t1*u1**(-1)*u2 + 48*s**(-1)*t1 + 
     +    80*s**(-1)*t1**2*u1**(-1) + 16*s**(-1)*u1 - 32*s**(-1)*u2 + 
     +    80*t1*u1**(-1) - 32*u1**(-1)*u2 )
      MM_v = MM_v + SCB(4,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +     - 16 + 32*m1**2*s**(-2)*t1 + 32*m1**2*s**(-2)*u2 + 16*m1**2*
     +    s**(-1)*t1*u1**(-1) + 48*m1**2*s**(-1)*u1**(-1)*u2 - 16*m1**2
     +    *u1**(-1) - 32*m2**2*s**(-2)*t1 - 32*m2**2*s**(-2)*u2 - 32*
     +    m2**2*s**(-1)*u1**(-1)*u2 - 32*s**(-2)*t1*u2 - 32*s**(-2)*
     +    t1**2 - 64*s**(-1)*t1*u1**(-1)*u2 - 48*s**(-1)*t1 - 80*
     +    s**(-1)*t1**2*u1**(-1) - 16*s**(-1)*u1 + 32*s**(-1)*u2 - 80*
     +    t1*u1**(-1) + 32*u1**(-1)*u2 )
      MM_v = MM_v + SCB(5,1)*(h_r2+h_l2)*Nc*Cf**2*Pi**2*alphas**2*
     + prefac * ( 32 - 192*m1**2*s**(-1)*t1*u1**(-1) + 32*m1**2*s**(-1)
     +    *t1*u**(-1) - 192*m1**2*s**(-1)*t1**2*u1**(-2) + 32*m1**2*
     +    s**(-1)*t1**2*u1**(-1)*u**(-1) - 64*m1**2*s*u1**(-2) + 32*
     +    m1**2*s*u1**(-1)*u**(-1) - 160*m1**2*t1*u1**(-2) + 32*m1**2*
     +    t1*u1**(-1)*u**(-1) - 128*m1**2*u1**(-1) + 32*m1**2*u**(-1)
     +     + 64*m1**4*s**(-1)*t1*u1**(-1)*u**(-1) + 64*m1**4*s**(-1)*
     +    t1**2*u1**(-2)*u**(-1) + 384*m1**4*s*u1**(-3) - 64*m1**4*s*
     +    u1**(-2)*u**(-1) + 384*m1**4*t1*u1**(-3) - 32*m1**4*t1*
     +    u1**(-2)*u**(-1) + 192*m1**4*u1**(-2) - 128*m1**6*s*u1**(-3)*
     +    u**(-1) - 128*m1**6*t1*u1**(-3)*u**(-1) - 64*m1**6*u1**(-2)*
     +    u**(-1) + 32*s**(-1)*t1 + 32*s**(-1)*t1**2*u1**(-1) + 32*s*
     +    u1**(-1) + 32*t1*u1**(-1) )
      MM_v = MM_v + SCB(5,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * ( 32 + 32*m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2**(-1) + 
     +    128*m1**2*s**(-1)*t1*u1**(-1) + 16*m1**2*s**(-1)*t1*u**(-1)
     +     + 64*m1**2*s**(-1)*t1**2*u1**(-2) + 32*m1**2*s**(-1) + 48*
     +    m1**2*s*u1**(-2) + 16*m1**2*s*u1**(-1)*u**(-1) + 64*m1**2*t1*
     +    u1**(-2) + 32*m1**2*t1*u1**(-1)*u**(-1) + 128*m1**2*u1**(-1)
     +     + 32*m1**4*s**(-1)*u1**(-1) - 128*m1**4*s*u1**(-3) - 128*
     +    m1**4*t1*u1**(-3) - 64*m1**4*u1**(-2) + 32*m2**2*s**(-1)*
     +    u1**(-1)*u2 + 32*m2**2*u1**(-2)*u2 + 32*s**(-1)*t1*u1**(-1)*
     +    u2 + 16*s**(-1)*t1 + 64*s**(-1)*t1**2*u1**(-1) - 16*s**(-1)*
     +    t1**2*u**(-1) + 64*s*t1*u1**(-2) - 32*s*u1**(-2)*u2 + 32*s*
     +    u1**(-1) - 16*s*u**(-1) + 32*t1*u1**(-2)*u2 + 96*t1*u1**(-1)
     +     - 16*t1*u**(-1) + 64*t1**2*u1**(-2) - 32*u1**(-1)*u2 - 16*u1
     +    *u**(-1) )
      MM_v = MM_v + SCB(5,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +     - 32*m1**2*m2**2*s**(-1)*t1*u1**(-1)*u2**(-1) - 160*m1**2*
     +    s**(-1)*t1*u1**(-1) + 16*m1**2*s**(-1)*t1*u**(-1) - 64*m1**2*
     +    s**(-1)*t1**2*u1**(-2) - 32*m1**2*s**(-1)*t1**2*u1**(-1)*
     +    u**(-1) - 32*m1**2*s**(-1) - 80*m1**2*s*u1**(-2) - 16*m1**2*s
     +    *u1**(-1)*u**(-1) - 160*m1**2*t1*u1**(-2) - 128*m1**2*
     +    u1**(-1) - 32*m1**2*u**(-1) + 32*m1**4*s**(-1)*t1*u1**(-1)*
     +    u**(-1) - 32*m1**4*s**(-1)*u1**(-1) + 160*m1**4*s*u1**(-3) + 
     +    32*m1**4*s*u1**(-2)*u**(-1) + 128*m1**4*t1*u1**(-3) + 64*
     +    m1**4*t1*u1**(-2)*u**(-1) + 64*m1**4*u1**(-2) - 32*m2**2*
     +    s**(-1)*u1**(-1)*u2 - 32*m2**2*u1**(-2)*u2 - 32*s**(-1)*t1*
     +    u1**(-1)*u2 - 16*s**(-1)*t1 - 32*s**(-1)*t1**2*u1**(-1) - 16*
     +    s**(-1)*t1**2*u**(-1) - 64*s*t1*u1**(-2) + 32*s*u1**(-2)*u2
     +     - 16*s*u**(-1) - 32*t1*u1**(-2)*u2 - 64*t1*u1**(-1) - 16*t1*
     +    u**(-1) - 64*t1**2*u1**(-2) + 32*u1**(-1)*u2 - 16*u1*u**(-1)
     +     )
      MM_v = MM_v + SCBP(2,1)*Cf*Pi*alphas*prefac * ( 16*m1**2*born )
      MM_v = MM_v + SCC(1,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * ( 32*s*t1*u1**(-1) + 32*s + 16*s**2*u1**(-1) + 32*t1 + 
     +    32*t1**2*u1**(-1) + 16*u1 )
      MM_v = MM_v + SCC(1,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +     - 16*m1**2*s*u1**(-1) + 32*s*t1*u1**(-1) + 32*s + 16*s**2*
     +    u1**(-1) + 32*t1 + 32*t1**2*u1**(-1) + 16*u1 )
      MM_v = MM_v + SCC(2,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +     - 16*m1**2*s**(-1)*t1 - 16*m1**2*t1*u1**(-1) )
      MM_v = MM_v + SCC(3,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * ( 32*s**(-1)*t1*u1 + 32*s**(-1)*t1**2 + 16*s**(-1)*
     +    u1**2 + 16*s + 32*t1 + 32*u1 )
      MM_v = MM_v + SCC(3,2)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +     - 16*m1**2*s**(-1)*u1 - 32*m1**2*s*u1**(-1) - 32*m1**2*t1*
     +    u1**(-1) - 64*m1**2 + 32*m1**4*s*u1**(-2) + 32*s**(-1)*t1*u1
     +     + 32*s**(-1)*t1**2 + 16*s**(-1)*u1**2 + 16*s + 32*t1 + 32*u1
     +     )
      MM_v = MM_v + SCC(4,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * ( 32*m1**2*m2**2*s**(-1)*t1*u1**(-1) + 96*m1**2*m2**2*
     +    s**(-1)*u1**(-1)*u2 + 128*m1**2*m2**2*u1**(-2)*u2 + 32*m1**2*
     +    s**(-1)*t1*u1**(-1)*u2 + 32*m1**2*s**(-1)*t1**2*u1**(-1) + 64
     +    *m1**2*s*t1*u1**(-2) - 32*m1**2*s*u1**(-2)*u2 + 32*m1**2*s*
     +    u1**(-1) + 32*m1**2*t1*u1**(-2)*u2 + 96*m1**2*t1*u1**(-1) + 
     +    64*m1**2*t1**2*u1**(-2) - 32*m1**2*u1**(-1)*u2 + 32*m1**2 - 
     +    32*m1**4*s**(-1)*t1*u1**(-1) - 64*m1**4*s**(-1)*u1**(-1)*u2
     +     - 96*m1**4*u1**(-2)*u2 - 32*m2**2*s**(-1)*t1*u1**(-1)*u2 - 
     +    32*m2**2*s**(-1)*t1**2*u1**(-1) - 64*m2**2*s*t1*u1**(-2) + 32
     +    *m2**2*s*u1**(-2)*u2 - 32*m2**2*t1*u1**(-2)*u2 - 64*m2**2*t1*
     +    u1**(-1) - 64*m2**2*t1**2*u1**(-2) + 32*m2**2*u1**(-1)*u2 - 
     +    32*m2**4*s**(-1)*u1**(-1)*u2 - 32*m2**4*u1**(-2)*u2 - 8*
     +    s**(-1)*t1*u1 - 24*s**(-1)*t1**2 - 8*s**(-1)*t1**3*u1*
     +    u2**(-2) - 8*s**(-1)*t1**4*u2**(-2) - 32*s*t1*u1**(-1) - 8*s*
     +    t1*u1*u2**(-2) )
      MM_v = MM_v + SCC(4,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * ( 8*s*t1**2*u2**(-2) + 48*s*t1**3*u1**(-1)*u2**(-2) - 
     +    32*s + 8*s**2*t1*u2**(-2) + 48*s**2*t1**2*u1**(-1)*u2**(-2)
     +     - 16*s**2*u1**(-1) + 16*s**3*t1*u1**(-1)*u2**(-2) - 40*t1 - 
     +    16*t1**2*u1**(-1) - 16*t1**2*u1*u2**(-2) - 8*t1**3*u2**(-2)
     +     + 16*t1**4*u1**(-1)*u2**(-2) - 16*u1 )
      MM_v = MM_v + SCC(4,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +     - 32*m1**2*m2**2*s**(-1)*t1*u1**(-1) - 96*m1**2*m2**2*
     +    s**(-1)*u1**(-1)*u2 - 128*m1**2*m2**2*u1**(-2)*u2 - 32*m1**2*
     +    s**(-1)*t1*u1**(-1)*u2 - 16*m1**2*s**(-1)*t1 - 32*m1**2*
     +    s**(-1)*t1**2*u1**(-1) + 32*m1**2*s**(-1)*t1**3*u2**(-2) - 64
     +    *m1**2*s*t1*u1**(-2) + 32*m1**2*s*t1*u2**(-2) - 64*m1**2*s*
     +    t1**2*u1**(-1)*u2**(-2) + 32*m1**2*s*u1**(-2)*u2 - 32*m1**2*s
     +    *u1**(-1) - 32*m1**2*s**2*t1*u1**(-1)*u2**(-2) - 32*m1**2*t1*
     +    u1**(-2)*u2 - 64*m1**2*t1*u1**(-1) - 64*m1**2*t1**2*u1**(-2)
     +     + 64*m1**2*t1**2*u2**(-2) - 32*m1**2*t1**3*u1**(-1)*u2**(-2)
     +     + 32*m1**2*u1**(-1)*u2 - 16*m1**2 + 32*m1**4*s**(-1)*t1*
     +    u1**(-1) + 64*m1**4*s**(-1)*u1**(-1)*u2 + 96*m1**4*u1**(-2)*
     +    u2 + 32*m2**2*s**(-1)*t1*u1**(-1)*u2 + 32*m2**2*s**(-1)*t1**2
     +    *u1**(-1) + 64*m2**2*s*t1*u1**(-2) - 32*m2**2*s*u1**(-2)*u2
     +     + 32*m2**2*t1*u1**(-2)*u2 + 64*m2**2*t1*u1**(-1) + 64*m2**2*
     +    t1**2*u1**(-2) )
      MM_v = MM_v + SCC(4,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +     - 32*m2**2*u1**(-1)*u2 + 32*m2**4*s**(-1)*u1**(-1)*u2 + 32*
     +    m2**4*u1**(-2)*u2 + 32*s**(-1)*t1**2 + 16*s**(-1)*t1**3*u1*
     +    u2**(-2) + 16*s*t1*u1**(-1) + 16*s*t1*u1*u2**(-2) - 32*s*
     +    t1**2*u2**(-2) + 32*s - 16*s**2*t1*u2**(-2) + 16*s**2*
     +    u1**(-1) + 48*t1 + 32*t1**2*u1*u2**(-2) - 16*t1**3*u2**(-2)
     +     + 16*u1 )
      MM_v = MM_v + SCC(5,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +    16*m1**2*s*u1**(-1) + 16*m1**2 - 32*s**(-1)*t1*u1 - 32*
     +    s**(-1)*t1**2 - 16*s**(-1)*u1**2 - 32*s*t1*u1**(-1) - 48*s - 
     +    16*s**2*u1**(-1) - 64*t1 - 32*t1**2*u1**(-1) - 48*u1 )
      MM_v = MM_v + SCC(5,2)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +    16*m1**2*s**(-1)*u1 - 96*m1**2*s*t1*t2**(-2) + 96*m1**2*s*
     +    u1**(-1) + 64*m1**2*s*t2**(-1) - 96*m1**2*s**2*t1*u1**(-1)*
     +    t2**(-2) - 64*m1**2*s**2*t2**(-2) - 64*m1**2*s**3*u1**(-1)*
     +    t2**(-2) + 96*m1**2*t1*u1**(-1) + 96*m1**2*t1*t2**(-1) + 48*
     +    m1**2 - 64*m1**4*s*t2**(-2) - 64*m1**4*s**2*u1**(-1)*t2**(-2)
     +     + 64*m1**4*u1**(-1) + 64*m1**4*t2**(-1) - 32*s**(-1)*t1*u1
     +     - 32*s**(-1)*t1**2 - 16*s**(-1)*u1**2 + 16*s*t1*u1**(-1) + 
     +    48*s*t1*t2**(-1) - 32*s*t1**2*t2**(-2) - 48*s - 48*s**2*t1*
     +    t2**(-2) - 32*s**2*t1**2*u1**(-1)*t2**(-2) + 16*s**2*t2**(-1)
     +     - 48*s**3*t1*u1**(-1)*t2**(-2) - 16*s**3*t2**(-2) - 16*s**4*
     +    u1**(-1)*t2**(-2) - 64*t1 + 32*t1**2*t2**(-1) - 48*u1 )
      MM_v = MM_v + SCC(6,1)*(h_r2+h_l2)*kaellen**(-1)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * ( 96*m1**2*m2**2*s**(-1)*t1*u2 + 32*m1**2*
     +    m2**2*s**(-1)*t1**2 + 64*m1**2*m2**2*s**(-1)*u2**2 + 80*m1**2
     +    *m2**2*s*t1*u1**(-1) + 176*m1**2*m2**2*s*u1**(-1)*u2 + 192*
     +    m1**2*m2**2*t1*u1**(-1)*u2 + 64*m1**2*m2**2*t1 + 64*m1**2*
     +    m2**2*t1**2*u1**(-1) + 128*m1**2*m2**2*u1**(-1)*u2**2 + 128*
     +    m1**2*m2**2*u2 - 64*m1**2*m2**4*s**(-2)*t1*u2 - 32*m1**2*
     +    m2**4*s**(-2)*t1**2 - 32*m1**2*m2**4*s**(-2)*u2**2 - 128*
     +    m1**2*m2**4*s**(-1)*t1*u1**(-1)*u2 - 64*m1**2*m2**4*s**(-1)*
     +    t1 - 64*m1**2*m2**4*s**(-1)*t1**2*u1**(-1) - 64*m1**2*m2**4*
     +    s**(-1)*u1**(-1)*u2**2 - 64*m1**2*m2**4*s**(-1)*u2 - 96*m1**2
     +    *m2**4*t1*u1**(-1) - 112*m1**2*m2**4*u1**(-1)*u2 + 16*m1**2*
     +    m2**6*s**(-1)*t1*u1**(-1) + 16*m1**2*m2**6*s**(-1)*u1**(-1)*
     +    u2 - 64*m1**2*s*t1*u1**(-1)*u2 + 160*m1**2*s*t1 + 16*m1**2*s*
     +    t1**2*u1**(-1) - 64*m1**2*s*u1**(-1)*u2**2 + 112*m1**2*s*u1
     +     - 64*m1**2*s*u2 )
      MM_v = MM_v + SCC(6,1)*(h_r2+h_l2)*kaellen**(-1)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * (  - 80*m1**2*s**2*u1**(-1)*u2 + 64*m1**2*
     +    s**2 + 64*m1**2*t1*u1 - 32*m1**2*t1*u2 + 32*m1**2*t1**2 + 32*
     +    m1**2*u1**2 - 32*m1**2*u2**2 + 128*m1**4*m2**2*s**(-2)*t1*u2
     +     + 64*m1**4*m2**2*s**(-2)*t1**2 + 64*m1**4*m2**2*s**(-2)*
     +    u2**2 + 256*m1**4*m2**2*s**(-1)*t1*u1**(-1)*u2 + 128*m1**4*
     +    m2**2*s**(-1)*t1 + 128*m1**4*m2**2*s**(-1)*t1**2*u1**(-1) + 
     +    128*m1**4*m2**2*s**(-1)*u1**(-1)*u2**2 + 128*m1**4*m2**2*
     +    s**(-1)*u2 + 160*m1**4*m2**2*t1*u1**(-1) + 192*m1**4*m2**2*
     +    u1**(-1)*u2 - 48*m1**4*m2**4*s**(-1)*t1*u1**(-1) - 48*m1**4*
     +    m2**4*s**(-1)*u1**(-1)*u2 + 32*m1**4*s**(-1)*t1*u2 + 32*m1**4
     +    *s**(-1)*t1**2 + 80*m1**4*s*t1*u1**(-1) - 16*m1**4*s*u1**(-1)
     +    *u2 - 128*m1**4*s - 64*m1**4*s**2*u1**(-1) + 64*m1**4*t1*
     +    u1**(-1)*u2 + 64*m1**4*t1 + 64*m1**4*t1**2*u1**(-1) + 48*
     +    m1**6*m2**2*s**(-1)*t1*u1**(-1) + 48*m1**6*m2**2*s**(-1)*
     +    u1**(-1)*u2 )
      MM_v = MM_v + SCC(6,1)*(h_r2+h_l2)*kaellen**(-1)*Nc**2*Cf*Pi**2*
     + alphas**2*prefac * (  - 64*m1**6*s**(-2)*t1*u2 - 32*m1**6*
     +    s**(-2)*t1**2 - 32*m1**6*s**(-2)*u2**2 - 128*m1**6*s**(-1)*t1
     +    *u1**(-1)*u2 - 64*m1**6*s**(-1)*t1 - 64*m1**6*s**(-1)*t1**2*
     +    u1**(-1) - 64*m1**6*s**(-1)*u1**(-1)*u2**2 - 64*m1**6*s**(-1)
     +    *u2 - 64*m1**6*t1*u1**(-1) - 80*m1**6*u1**(-1)*u2 - 16*m1**8*
     +    s**(-1)*t1*u1**(-1) - 16*m1**8*s**(-1)*u1**(-1)*u2 - 32*s*t1*
     +    u1 - 16*s*t1**2 - 16*s*u1**2 - 80*t1*u1**2 - 88*t1**2*u1 - 32
     +    *t1**3 - 24*u1**3 )
      MM_v = MM_v + SCC(6,1)*(h_r2+h_l2)*kaellen**(-1)*Cf*Pi**2*
     + alphas**2*prefac * (  - 96*m1**2*m2**2*s**(-1)*t1*u2 - 32*m1**2*
     +    m2**2*s**(-1)*t1**2 - 64*m1**2*m2**2*s**(-1)*u2**2 - 80*m1**2
     +    *m2**2*s*t1*u1**(-1) - 176*m1**2*m2**2*s*u1**(-1)*u2 - 192*
     +    m1**2*m2**2*t1*u1**(-1)*u2 - 64*m1**2*m2**2*t1 - 64*m1**2*
     +    m2**2*t1**2*u1**(-1) - 128*m1**2*m2**2*u1**(-1)*u2**2 - 128*
     +    m1**2*m2**2*u2 + 64*m1**2*m2**4*s**(-2)*t1*u2 + 32*m1**2*
     +    m2**4*s**(-2)*t1**2 + 32*m1**2*m2**4*s**(-2)*u2**2 + 128*
     +    m1**2*m2**4*s**(-1)*t1*u1**(-1)*u2 + 64*m1**2*m2**4*s**(-1)*
     +    t1 + 64*m1**2*m2**4*s**(-1)*t1**2*u1**(-1) + 64*m1**2*m2**4*
     +    s**(-1)*u1**(-1)*u2**2 + 64*m1**2*m2**4*s**(-1)*u2 + 96*m1**2
     +    *m2**4*t1*u1**(-1) + 112*m1**2*m2**4*u1**(-1)*u2 - 16*m1**2*
     +    m2**6*s**(-1)*t1*u1**(-1) - 16*m1**2*m2**6*s**(-1)*u1**(-1)*
     +    u2 + 64*m1**2*s*t1*u1**(-1)*u2 + 64*m1**2*s*t1 + 64*m1**2*s*
     +    u1**(-1)*u2**2 + 64*m1**2*s*u2 - 64*m1**2*s**2*t1*u1**(-1) + 
     +    80*m1**2*s**2*u1**(-1)*u2 )
      MM_v = MM_v + SCC(6,1)*(h_r2+h_l2)*kaellen**(-1)*Cf*Pi**2*
     + alphas**2*prefac * ( 32*m1**2*t1*u2 + 32*m1**2*u2**2 - 128*m1**4
     +    *m2**2*s**(-2)*t1*u2 - 64*m1**4*m2**2*s**(-2)*t1**2 - 64*
     +    m1**4*m2**2*s**(-2)*u2**2 - 256*m1**4*m2**2*s**(-1)*t1*
     +    u1**(-1)*u2 - 128*m1**4*m2**2*s**(-1)*t1 - 128*m1**4*m2**2*
     +    s**(-1)*t1**2*u1**(-1) - 128*m1**4*m2**2*s**(-1)*u1**(-1)*
     +    u2**2 - 128*m1**4*m2**2*s**(-1)*u2 - 160*m1**4*m2**2*t1*
     +    u1**(-1) - 192*m1**4*m2**2*u1**(-1)*u2 + 48*m1**4*m2**4*
     +    s**(-1)*t1*u1**(-1) + 48*m1**4*m2**4*s**(-1)*u1**(-1)*u2 - 32
     +    *m1**4*s**(-1)*t1*u2 - 32*m1**4*s**(-1)*t1**2 - 80*m1**4*s*t1
     +    *u1**(-1) + 16*m1**4*s*u1**(-1)*u2 - 64*m1**4*t1*u1**(-1)*u2
     +     - 64*m1**4*t1 - 64*m1**4*t1**2*u1**(-1) - 48*m1**6*m2**2*
     +    s**(-1)*t1*u1**(-1) - 48*m1**6*m2**2*s**(-1)*u1**(-1)*u2 + 64
     +    *m1**6*s**(-2)*t1*u2 + 32*m1**6*s**(-2)*t1**2 + 32*m1**6*
     +    s**(-2)*u2**2 + 128*m1**6*s**(-1)*t1*u1**(-1)*u2 + 64*m1**6*
     +    s**(-1)*t1 )
      MM_v = MM_v + SCC(6,1)*(h_r2+h_l2)*kaellen**(-1)*Cf*Pi**2*
     + alphas**2*prefac * ( 64*m1**6*s**(-1)*t1**2*u1**(-1) + 64*m1**6*
     +    s**(-1)*u1**(-1)*u2**2 + 64*m1**6*s**(-1)*u2 + 64*m1**6*t1*
     +    u1**(-1) + 80*m1**6*u1**(-1)*u2 + 16*m1**8*s**(-1)*t1*
     +    u1**(-1) + 16*m1**8*s**(-1)*u1**(-1)*u2 + 16*s*t1*u1 + 32*s*
     +    t1**2 + 16*s*t1**3*u1**(-1) - 16*t1*u1**2 - 32*t1**2*u1 - 16*
     +    t1**3 )
      MM_v = MM_v + SCC(6,1)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * ( 64*m1**2*m2**2*s**(-2)*t1 + 64*m1**2*m2**2*s**(-2)*u2
     +     + 16*m1**2*m2**2*s**(-1)*t1*u1**(-1) + 80*m1**2*m2**2*
     +    s**(-1)*u1**(-1)*u2 + 32*m1**2*s**(-2)*t1*u2 + 32*m1**2*
     +    s**(-2)*t1**2 + 64*m1**2*s**(-1)*t1*u1**(-1)*u2 + 64*m1**2*
     +    s**(-1)*t1 + 64*m1**2*s**(-1)*t1**2*u1**(-1) - 16*m1**2*s*
     +    u1**(-1) + 64*m1**2*t1*u1**(-1) + 16*m1**2*u1**(-1)*u2 - 64*
     +    m1**2 - 32*m1**4*s**(-2)*t1 - 32*m1**4*s**(-2)*u2 - 16*m1**4*
     +    s**(-1)*t1*u1**(-1) - 48*m1**4*s**(-1)*u1**(-1)*u2 - 32*m2**2
     +    *s**(-2)*t1*u2 - 32*m2**2*s**(-2)*t1**2 - 64*m2**2*s**(-1)*t1
     +    *u1**(-1)*u2 - 32*m2**2*s**(-1)*t1 - 64*m2**2*s**(-1)*t1**2*
     +    u1**(-1) + 32*m2**2*s**(-1)*u2 - 64*m2**2*t1*u1**(-1) + 32*
     +    m2**2*u1**(-1)*u2 - 32*m2**4*s**(-2)*t1 - 32*m2**4*s**(-2)*u2
     +     - 32*m2**4*s**(-1)*u1**(-1)*u2 - 16*s**(-1)*t1*u1 - 16*
     +    s**(-1)*u1**2 - 16*s*t1*u1**(-1) - 32*t1**2*u1**(-1) - 8*u1 )
      MM_v = MM_v + SCC(6,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +     - 64*m1**2*m2**2*s**(-2)*t1 - 64*m1**2*m2**2*s**(-2)*u2 - 16
     +    *m1**2*m2**2*s**(-1)*t1*u1**(-1) - 80*m1**2*m2**2*s**(-1)*
     +    u1**(-1)*u2 - 32*m1**2*s**(-2)*t1*u2 - 32*m1**2*s**(-2)*t1**2
     +     - 64*m1**2*s**(-1)*t1*u1**(-1)*u2 - 64*m1**2*s**(-1)*t1 - 64
     +    *m1**2*s**(-1)*t1**2*u1**(-1) - 48*m1**2*t1*u1**(-1) - 16*
     +    m1**2*u1**(-1)*u2 + 16*m1**2 + 32*m1**4*s**(-2)*t1 + 32*m1**4
     +    *s**(-2)*u2 + 16*m1**4*s**(-1)*t1*u1**(-1) + 48*m1**4*s**(-1)
     +    *u1**(-1)*u2 + 32*m2**2*s**(-2)*t1*u2 + 32*m2**2*s**(-2)*
     +    t1**2 + 64*m2**2*s**(-1)*t1*u1**(-1)*u2 + 32*m2**2*s**(-1)*t1
     +     + 64*m2**2*s**(-1)*t1**2*u1**(-1) - 32*m2**2*s**(-1)*u2 + 64
     +    *m2**2*t1*u1**(-1) - 32*m2**2*u1**(-1)*u2 + 32*m2**4*s**(-2)*
     +    t1 + 32*m2**4*s**(-2)*u2 + 32*m2**4*s**(-1)*u1**(-1)*u2 + 16*
     +    s**(-1)*t1*u1 + 16*s**(-1)*u1**2 + 16*s + 48*t1 + 32*t1**2*
     +    u1**(-1) + 32*u1 )
      MM_v = MM_v + SCD(1,1)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +    16*m1**2*s*t1*u1**(-1) - 32*s*t1 - 32*s*t1**2*u1**(-1) - 16*
     +    s**2*t1*u1**(-1) - 16*t1*u1 - 32*t1**2 - 32*t1**3*u1**(-1) )
      MM_v = MM_v + SCD(1,2)*(h_r2+h_l2)*Nc**2*Cf*Pi**2*alphas**2*
     + prefac * (  - 64*m1**2*s*t1*u1**(-1) - 64*m1**2*s - 64*m1**2*
     +    s**2*u1**(-1) + 32*s*t1 + 32*s*u1 + 16*s**2 + 32*t1*u1 + 32*
     +    t1**2 + 16*u1**2 )
      MM_v = MM_v + SCD(1,3)*(h_r2+h_l2)*Cf*Pi**2*alphas**2*prefac * ( 
     +    16*m1**2*s**(-1)*t1*u1 + 64*m1**2*s*t1*u1**(-1) + 64*m1**2*t1
     +     + 64*m1**2*t1**2*u1**(-1) - 16*s**(-1)*t1*u1**2 - 32*s**(-1)
     +    *t1**2*u1 - 32*s**(-1)*t1**3 - 16*s*t1 - 32*t1*u1 - 32*t1**2
     +     )

c         decouple the heavy flavors from alpha_s
      MM_v = MM_v + born * prefac * 4.D0*Pi*alphas *
     &            2.D0/3.D0       * log(qr**2/m1**2) 

ctp     &      (  (Ns-1.D0)/3.D0  * log(qr**2/msx**2)
ctp     &       + 1.D0/6.D0       * log(qr**2/m1**2)
ctp     &       + 1.D0/6.D0       * log(qr**2/ms2**2)
ctp     &       + 2.D0/3.D0       * log(qr**2/mt**2) 
ctp     &       + 2.D0/3.D0 * Nc  * log(qr**2/mg**2)   )

c               the phase space except for 1/s**2 
      HT_QGV = MM_v / ( 16.D0 * pi )

c               the averaging factors
      HT_QGV = HT_QGV /4.D0 /Nc /(Nc**2-1.D0)

c               the luminosity
      HT_QGV = HT_QGV *lumi(1)

      return
      end

