(1) How to run the prospino f90 code: 

  download files from official Prospino2 website 
  email to plehn@uni-heidelberg.de if you want to know about updates/bug removal/new features and channels
  unpack prospino.tar.gz

  fix path in Makefile
  fix f90 compiler in Makefile (tested with Intel, DEC-Alpha, Portland Group, NAG, gfortran)

  type `make'
  run executable `prospino.run > screeen.out'
  to remove object files etc type `make clean' (does not affect the running code)

  enjoy the ride, for comments or complaints please email tilman.plehn@cern.ch

  IF YOU USE THIS CODE, PLEASE REFERENCE THE ORIGINAL PAPERS AS LISTED ON PROSPINO2 WEB PAGE

(2) Things you could change in the code:

  all SUSY parameters are read from the SLHA file (m_LQ = m_stop1)

  nlo flag, collider flag (TeV/LHC) and final state:            prospino_main.f90
  Standard Model input parameters:                              Xvital.f90
  MSSM spectrum, masses, input mode, input/output unit#:        Xprospino_subroutine.f90
  interface with parton densities and MSSM spectrum generators: all files in Pro2_interface

  please note: if you edit any other file and want me to check your result afterwards -> NOPE!

(3) Output:

  all cross sections in pb, all errors relative errors!

  prospino.dat: short output of masses and LO/NLO cross sections (dummy0, dummy1 dummy variables in default mode)
                with format (parameters not needed for the respective channel set to zero):

                final state, neutralino/chargino#1 and #2, dummy0, dummy1, ren/fac scale factor, mass1, mass2, sin(2 angle)
                cross section LO, rel error LO, cross section NLO, rel error NLO, K factor, corrected cross section LO, corrected cross section NLO

                while the LO and NLO results are produced with some numerical assumptions (degenerate squark masses, reduced mass hierarchies),
                the rate LO_ms do not include these assumptions and the NLO_ms rate is computed as the LO_ms rate with our best K factor. 

                EXECUTIVE SUMMARY: UNLESS YOU HAVE A PARTICULAR REQUIREMENT PLEASE USE THE LO_ms and NLO_ms RATES AS THE PROSPINO2 OUTPUT

  prospino.dat2: long output file with all masses etc.

  prospino.dat3: log file with spectrum and all kinds of parameters

  [note that all these output files will be overwritten by the code if you run the code for a second time]

(4) Comment on LQ processes:

  by default the scalar LQ mass is set to the stop1 mass, for example in the SHLA input file
  the pair production cross section depends on nothing but the mass
  for the associated production cross section the over-all coupling \lambda is set to unity
  also for the associated production, the initial-state quark flavor has to be set in Xprospino_subroutine.f

(5) Comment on charged Higgs processes:
  
  these processes are not officially part of Prospino! 
  they are simply in there for my convenience, the code will stop running if you pick these final states
  please drop me a private email if you would like to use these codes 

(6) In case you would like to know: structure of the f90 files

  file name:                module in file                external modules required 
                            content of modules: functions and subroutines

   prospino_main.f90:        main                          xx_kinds, xx_prospino_subroutine, 
                                        
   Xprospino_subroutine.f90: xx_prospino_subroutine        xx_in_out, xx_kinds, xx_pass_integ, 
                                                           xx_public_variables, xx_initialize,
                                                           xx_integral_ng, xx_integral_ns, xx_integral_nn, xx_integral_ll
                                                           xx_integral_tb, xx_integral_lq, xx_integral_le,
                                                           xx_integral_hh, xx_integral_ht
                             subroutines: INIT_GLOBAL, INIT_ITERATION, INIT_VEGAS, INIT_SUSY, INIT_ALPHAS, INIT_ALPHAS_NLO
                             internal subroutines: TEST_SETTINGS_GLOBAL, TEST_SETTINGS_ITERATION

   Xinitialize.f90:          xx_initialize                 xx_in_out, xx_kinds, xx_pass_integ, xx_public_variables
                             subroutines: INIT_GLOBAL, INIT_ITERATION, INIT_VEGAS, INIT_SUSY, INIT_ALPHAS, INIT_ALPHAS_NLO
                             internal subroutines: TEST_SETTINGS_GLOBAL, TEST_SETTINGS_ITERATION

   Xin_out.f90:              xx_in_out                     xx_kinds, xx_pass_integ, xx_public_variables
                             subroutines: READ, DAT1, DAT2, DAT3

   Xinteg_ng.f90:            xx_integral_ng                xx_kinds, xx_pass_integ, xx_public_variables
                             functions:   IFCT_NG_X12
                             subroutines: COUPLING_NG

   Xinteg_ns.f90:            xx_integral_ns                xx_kinds, xx_pass_integ, xx_public_variables
                             functions:   IFCT_NS_X12
                             subroutines: COUPLING_NS_SIM, COUPLING_NS_EXT

   Xinteg_nn.f90:            xx_integral_nn                xx_kinds, xx_pass_integ, xx_public_variables
                             functions:   IFCT_NN_X12
                             subroutines: KIN_NN_SIM, COUPLING_NN

   Xinteg_ll.f90:            xx_integral_ll                xx_kinds, xx_pass_integ, xx_public_variables
                             functions:   IFCT_LL_X12
                             subroutines: KIN_LL_SIM, COUPLING_LL

   Xinteg_tb.f90:            xx_integral_tb                xx_kinds, xx_pass_integ, xx_public_variables
                             functions:   IFCT_TB_X12

   Xinteg_lq.f90:            xx_integral_lq                xx_kinds, xx_pass_integ, xx_public_variables
                             functions:   IFCT_LQ_X12

   Xinteg_le.f90:            xx_integral_le                xx_kinds, xx_pass_integ, xx_public_variables
                             functions:   IFCT_LE_X12
                             subroutines: LUMINOSITY_LE

   Xinteg_hh.f90:            xx_integral_hh                xx_kinds, xx_pass_integ, xx_public_variables
                             functions:   IFCT_HH_X12
                             subroutines: COUPLING_HH

   Xinteg_ht.f90:            xx_integral_ht                xx_kinds, xx_pass_integ, xx_public_variables
                             functions:   IFCT_HT_X12
                             subroutines: COUPLING_HT

   Xvital.f90:               xx_kinds
                             xx_pass_integ                 xx_kinds
                             xx_public_variables           xx_kinds

   * n.b.: modules used/linked only in modules, not in functions/subroutines!
